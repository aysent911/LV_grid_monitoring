
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model CustomerConsumption
 * 
 */
export type CustomerConsumption = $Result.DefaultSelection<Prisma.$CustomerConsumptionPayload>
/**
 * Model Loss
 * 
 */
export type Loss = $Result.DefaultSelection<Prisma.$LossPayload>
/**
 * Model Power
 * 
 */
export type Power = $Result.DefaultSelection<Prisma.$PowerPayload>
/**
 * Model Sensor
 * 
 */
export type Sensor = $Result.DefaultSelection<Prisma.$SensorPayload>
/**
 * Model SubStationPower
 * 
 */
export type SubStationPower = $Result.DefaultSelection<Prisma.$SubStationPowerPayload>
/**
 * Model VoltageCurrent
 * 
 */
export type VoltageCurrent = $Result.DefaultSelection<Prisma.$VoltageCurrentPayload>
/**
 * Model sensor
 * 
 */
export type sensor = $Result.DefaultSelection<Prisma.$sensorPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more CustomerConsumptions
 * const customerConsumptions = await prisma.customerConsumption.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more CustomerConsumptions
   * const customerConsumptions = await prisma.customerConsumption.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<'extends', Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.customerConsumption`: Exposes CRUD operations for the **CustomerConsumption** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CustomerConsumptions
    * const customerConsumptions = await prisma.customerConsumption.findMany()
    * ```
    */
  get customerConsumption(): Prisma.CustomerConsumptionDelegate<ExtArgs>;

  /**
   * `prisma.loss`: Exposes CRUD operations for the **Loss** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Losses
    * const losses = await prisma.loss.findMany()
    * ```
    */
  get loss(): Prisma.LossDelegate<ExtArgs>;

  /**
   * `prisma.power`: Exposes CRUD operations for the **Power** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Powers
    * const powers = await prisma.power.findMany()
    * ```
    */
  get power(): Prisma.PowerDelegate<ExtArgs>;

  /**
   * `prisma.sensor`: Exposes CRUD operations for the **Sensor** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Sensors
    * const sensors = await prisma.sensor.findMany()
    * ```
    */
  get sensor(): Prisma.SensorDelegate<ExtArgs>;

  /**
   * `prisma.subStationPower`: Exposes CRUD operations for the **SubStationPower** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SubStationPowers
    * const subStationPowers = await prisma.subStationPower.findMany()
    * ```
    */
  get subStationPower(): Prisma.SubStationPowerDelegate<ExtArgs>;

  /**
   * `prisma.voltageCurrent`: Exposes CRUD operations for the **VoltageCurrent** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more VoltageCurrents
    * const voltageCurrents = await prisma.voltageCurrent.findMany()
    * ```
    */
  get voltageCurrent(): Prisma.VoltageCurrentDelegate<ExtArgs>;

  /**
   * `prisma.sensor`: Exposes CRUD operations for the **sensor** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Sensors
    * const sensors = await prisma.sensor.findMany()
    * ```
    */
  get sensor(): Prisma.sensorDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.7.0
   * Query Engine version: 79fb5193cf0a8fdbef536e4b4a159cad677ab1b9
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray | { toJSON(): unknown }

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    CustomerConsumption: 'CustomerConsumption',
    Loss: 'Loss',
    Power: 'Power',
    Sensor: 'Sensor',
    SubStationPower: 'SubStationPower',
    VoltageCurrent: 'VoltageCurrent',
    sensor: 'sensor'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }


  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs}, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    meta: {
      modelProps: 'customerConsumption' | 'loss' | 'power' | 'sensor' | 'subStationPower' | 'voltageCurrent' | 'sensor'
      txIsolationLevel: Prisma.TransactionIsolationLevel
    },
    model: {
      CustomerConsumption: {
        payload: Prisma.$CustomerConsumptionPayload<ExtArgs>
        fields: Prisma.CustomerConsumptionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CustomerConsumptionFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CustomerConsumptionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CustomerConsumptionFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CustomerConsumptionPayload>
          }
          findFirst: {
            args: Prisma.CustomerConsumptionFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CustomerConsumptionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CustomerConsumptionFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CustomerConsumptionPayload>
          }
          findMany: {
            args: Prisma.CustomerConsumptionFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CustomerConsumptionPayload>[]
          }
          create: {
            args: Prisma.CustomerConsumptionCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CustomerConsumptionPayload>
          }
          createMany: {
            args: Prisma.CustomerConsumptionCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.CustomerConsumptionDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CustomerConsumptionPayload>
          }
          update: {
            args: Prisma.CustomerConsumptionUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CustomerConsumptionPayload>
          }
          deleteMany: {
            args: Prisma.CustomerConsumptionDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.CustomerConsumptionUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.CustomerConsumptionUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CustomerConsumptionPayload>
          }
          aggregate: {
            args: Prisma.CustomerConsumptionAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateCustomerConsumption>
          }
          groupBy: {
            args: Prisma.CustomerConsumptionGroupByArgs<ExtArgs>,
            result: $Utils.Optional<CustomerConsumptionGroupByOutputType>[]
          }
          count: {
            args: Prisma.CustomerConsumptionCountArgs<ExtArgs>,
            result: $Utils.Optional<CustomerConsumptionCountAggregateOutputType> | number
          }
        }
      }
      Loss: {
        payload: Prisma.$LossPayload<ExtArgs>
        fields: Prisma.LossFieldRefs
        operations: {
          findUnique: {
            args: Prisma.LossFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LossPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.LossFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LossPayload>
          }
          findFirst: {
            args: Prisma.LossFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LossPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.LossFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LossPayload>
          }
          findMany: {
            args: Prisma.LossFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LossPayload>[]
          }
          create: {
            args: Prisma.LossCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LossPayload>
          }
          createMany: {
            args: Prisma.LossCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.LossDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LossPayload>
          }
          update: {
            args: Prisma.LossUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LossPayload>
          }
          deleteMany: {
            args: Prisma.LossDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.LossUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.LossUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LossPayload>
          }
          aggregate: {
            args: Prisma.LossAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateLoss>
          }
          groupBy: {
            args: Prisma.LossGroupByArgs<ExtArgs>,
            result: $Utils.Optional<LossGroupByOutputType>[]
          }
          count: {
            args: Prisma.LossCountArgs<ExtArgs>,
            result: $Utils.Optional<LossCountAggregateOutputType> | number
          }
        }
      }
      Power: {
        payload: Prisma.$PowerPayload<ExtArgs>
        fields: Prisma.PowerFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PowerFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PowerPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PowerFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PowerPayload>
          }
          findFirst: {
            args: Prisma.PowerFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PowerPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PowerFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PowerPayload>
          }
          findMany: {
            args: Prisma.PowerFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PowerPayload>[]
          }
          create: {
            args: Prisma.PowerCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PowerPayload>
          }
          createMany: {
            args: Prisma.PowerCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.PowerDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PowerPayload>
          }
          update: {
            args: Prisma.PowerUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PowerPayload>
          }
          deleteMany: {
            args: Prisma.PowerDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.PowerUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.PowerUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PowerPayload>
          }
          aggregate: {
            args: Prisma.PowerAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregatePower>
          }
          groupBy: {
            args: Prisma.PowerGroupByArgs<ExtArgs>,
            result: $Utils.Optional<PowerGroupByOutputType>[]
          }
          count: {
            args: Prisma.PowerCountArgs<ExtArgs>,
            result: $Utils.Optional<PowerCountAggregateOutputType> | number
          }
        }
      }
      Sensor: {
        payload: Prisma.$SensorPayload<ExtArgs>
        fields: Prisma.SensorFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SensorFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SensorPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SensorFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SensorPayload>
          }
          findFirst: {
            args: Prisma.SensorFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SensorPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SensorFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SensorPayload>
          }
          findMany: {
            args: Prisma.SensorFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SensorPayload>[]
          }
          create: {
            args: Prisma.SensorCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SensorPayload>
          }
          createMany: {
            args: Prisma.SensorCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.SensorDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SensorPayload>
          }
          update: {
            args: Prisma.SensorUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SensorPayload>
          }
          deleteMany: {
            args: Prisma.SensorDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.SensorUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.SensorUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SensorPayload>
          }
          aggregate: {
            args: Prisma.SensorAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateSensor>
          }
          groupBy: {
            args: Prisma.SensorGroupByArgs<ExtArgs>,
            result: $Utils.Optional<SensorGroupByOutputType>[]
          }
          count: {
            args: Prisma.SensorCountArgs<ExtArgs>,
            result: $Utils.Optional<SensorCountAggregateOutputType> | number
          }
        }
      }
      SubStationPower: {
        payload: Prisma.$SubStationPowerPayload<ExtArgs>
        fields: Prisma.SubStationPowerFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SubStationPowerFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SubStationPowerPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SubStationPowerFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SubStationPowerPayload>
          }
          findFirst: {
            args: Prisma.SubStationPowerFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SubStationPowerPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SubStationPowerFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SubStationPowerPayload>
          }
          findMany: {
            args: Prisma.SubStationPowerFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SubStationPowerPayload>[]
          }
          create: {
            args: Prisma.SubStationPowerCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SubStationPowerPayload>
          }
          createMany: {
            args: Prisma.SubStationPowerCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.SubStationPowerDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SubStationPowerPayload>
          }
          update: {
            args: Prisma.SubStationPowerUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SubStationPowerPayload>
          }
          deleteMany: {
            args: Prisma.SubStationPowerDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.SubStationPowerUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.SubStationPowerUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SubStationPowerPayload>
          }
          aggregate: {
            args: Prisma.SubStationPowerAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateSubStationPower>
          }
          groupBy: {
            args: Prisma.SubStationPowerGroupByArgs<ExtArgs>,
            result: $Utils.Optional<SubStationPowerGroupByOutputType>[]
          }
          count: {
            args: Prisma.SubStationPowerCountArgs<ExtArgs>,
            result: $Utils.Optional<SubStationPowerCountAggregateOutputType> | number
          }
        }
      }
      VoltageCurrent: {
        payload: Prisma.$VoltageCurrentPayload<ExtArgs>
        fields: Prisma.VoltageCurrentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.VoltageCurrentFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$VoltageCurrentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.VoltageCurrentFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$VoltageCurrentPayload>
          }
          findFirst: {
            args: Prisma.VoltageCurrentFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$VoltageCurrentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.VoltageCurrentFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$VoltageCurrentPayload>
          }
          findMany: {
            args: Prisma.VoltageCurrentFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$VoltageCurrentPayload>[]
          }
          create: {
            args: Prisma.VoltageCurrentCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$VoltageCurrentPayload>
          }
          createMany: {
            args: Prisma.VoltageCurrentCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.VoltageCurrentDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$VoltageCurrentPayload>
          }
          update: {
            args: Prisma.VoltageCurrentUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$VoltageCurrentPayload>
          }
          deleteMany: {
            args: Prisma.VoltageCurrentDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.VoltageCurrentUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.VoltageCurrentUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$VoltageCurrentPayload>
          }
          aggregate: {
            args: Prisma.VoltageCurrentAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateVoltageCurrent>
          }
          groupBy: {
            args: Prisma.VoltageCurrentGroupByArgs<ExtArgs>,
            result: $Utils.Optional<VoltageCurrentGroupByOutputType>[]
          }
          count: {
            args: Prisma.VoltageCurrentCountArgs<ExtArgs>,
            result: $Utils.Optional<VoltageCurrentCountAggregateOutputType> | number
          }
        }
      }
      sensor: {
        payload: Prisma.$sensorPayload<ExtArgs>
        fields: Prisma.sensorFieldRefs
        operations: {
          findUnique: {
            args: Prisma.sensorFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$sensorPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.sensorFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$sensorPayload>
          }
          findFirst: {
            args: Prisma.sensorFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$sensorPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.sensorFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$sensorPayload>
          }
          findMany: {
            args: Prisma.sensorFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$sensorPayload>[]
          }
          create: {
            args: Prisma.sensorCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$sensorPayload>
          }
          createMany: {
            args: Prisma.sensorCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.sensorDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$sensorPayload>
          }
          update: {
            args: Prisma.sensorUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$sensorPayload>
          }
          deleteMany: {
            args: Prisma.sensorDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.sensorUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.sensorUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$sensorPayload>
          }
          aggregate: {
            args: Prisma.SensorAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateSensor>
          }
          groupBy: {
            args: Prisma.sensorGroupByArgs<ExtArgs>,
            result: $Utils.Optional<SensorGroupByOutputType>[]
          }
          count: {
            args: Prisma.sensorCountArgs<ExtArgs>,
            result: $Utils.Optional<SensorCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<'define', Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type SensorCountOutputType
   */

  export type SensorCountOutputType = {
    CustomerConsumption: number
    Power: number
    SubStationPower: number
    VoltageCurrent: number
  }

  export type SensorCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    CustomerConsumption?: boolean | SensorCountOutputTypeCountCustomerConsumptionArgs
    Power?: boolean | SensorCountOutputTypeCountPowerArgs
    SubStationPower?: boolean | SensorCountOutputTypeCountSubStationPowerArgs
    VoltageCurrent?: boolean | SensorCountOutputTypeCountVoltageCurrentArgs
  }

  // Custom InputTypes

  /**
   * SensorCountOutputType without action
   */
  export type SensorCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SensorCountOutputType
     */
    select?: SensorCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * SensorCountOutputType without action
   */
  export type SensorCountOutputTypeCountCustomerConsumptionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CustomerConsumptionWhereInput
  }


  /**
   * SensorCountOutputType without action
   */
  export type SensorCountOutputTypeCountPowerArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PowerWhereInput
  }


  /**
   * SensorCountOutputType without action
   */
  export type SensorCountOutputTypeCountSubStationPowerArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SubStationPowerWhereInput
  }


  /**
   * SensorCountOutputType without action
   */
  export type SensorCountOutputTypeCountVoltageCurrentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: VoltageCurrentWhereInput
  }



  /**
   * Models
   */

  /**
   * Model CustomerConsumption
   */

  export type AggregateCustomerConsumption = {
    _count: CustomerConsumptionCountAggregateOutputType | null
    _avg: CustomerConsumptionAvgAggregateOutputType | null
    _sum: CustomerConsumptionSumAggregateOutputType | null
    _min: CustomerConsumptionMinAggregateOutputType | null
    _max: CustomerConsumptionMaxAggregateOutputType | null
  }

  export type CustomerConsumptionAvgAggregateOutputType = {
    P: number | null
    Q: number | null
  }

  export type CustomerConsumptionSumAggregateOutputType = {
    P: number | null
    Q: number | null
  }

  export type CustomerConsumptionMinAggregateOutputType = {
    timestamp: Date | null
    sensorId: string | null
    P: number | null
    Q: number | null
  }

  export type CustomerConsumptionMaxAggregateOutputType = {
    timestamp: Date | null
    sensorId: string | null
    P: number | null
    Q: number | null
  }

  export type CustomerConsumptionCountAggregateOutputType = {
    timestamp: number
    sensorId: number
    P: number
    Q: number
    _all: number
  }


  export type CustomerConsumptionAvgAggregateInputType = {
    P?: true
    Q?: true
  }

  export type CustomerConsumptionSumAggregateInputType = {
    P?: true
    Q?: true
  }

  export type CustomerConsumptionMinAggregateInputType = {
    timestamp?: true
    sensorId?: true
    P?: true
    Q?: true
  }

  export type CustomerConsumptionMaxAggregateInputType = {
    timestamp?: true
    sensorId?: true
    P?: true
    Q?: true
  }

  export type CustomerConsumptionCountAggregateInputType = {
    timestamp?: true
    sensorId?: true
    P?: true
    Q?: true
    _all?: true
  }

  export type CustomerConsumptionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CustomerConsumption to aggregate.
     */
    where?: CustomerConsumptionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CustomerConsumptions to fetch.
     */
    orderBy?: CustomerConsumptionOrderByWithRelationInput | CustomerConsumptionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CustomerConsumptionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CustomerConsumptions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CustomerConsumptions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CustomerConsumptions
    **/
    _count?: true | CustomerConsumptionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CustomerConsumptionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CustomerConsumptionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CustomerConsumptionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CustomerConsumptionMaxAggregateInputType
  }

  export type GetCustomerConsumptionAggregateType<T extends CustomerConsumptionAggregateArgs> = {
        [P in keyof T & keyof AggregateCustomerConsumption]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCustomerConsumption[P]>
      : GetScalarType<T[P], AggregateCustomerConsumption[P]>
  }




  export type CustomerConsumptionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CustomerConsumptionWhereInput
    orderBy?: CustomerConsumptionOrderByWithAggregationInput | CustomerConsumptionOrderByWithAggregationInput[]
    by: CustomerConsumptionScalarFieldEnum[] | CustomerConsumptionScalarFieldEnum
    having?: CustomerConsumptionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CustomerConsumptionCountAggregateInputType | true
    _avg?: CustomerConsumptionAvgAggregateInputType
    _sum?: CustomerConsumptionSumAggregateInputType
    _min?: CustomerConsumptionMinAggregateInputType
    _max?: CustomerConsumptionMaxAggregateInputType
  }

  export type CustomerConsumptionGroupByOutputType = {
    timestamp: Date
    sensorId: string
    P: number
    Q: number
    _count: CustomerConsumptionCountAggregateOutputType | null
    _avg: CustomerConsumptionAvgAggregateOutputType | null
    _sum: CustomerConsumptionSumAggregateOutputType | null
    _min: CustomerConsumptionMinAggregateOutputType | null
    _max: CustomerConsumptionMaxAggregateOutputType | null
  }

  type GetCustomerConsumptionGroupByPayload<T extends CustomerConsumptionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CustomerConsumptionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CustomerConsumptionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CustomerConsumptionGroupByOutputType[P]>
            : GetScalarType<T[P], CustomerConsumptionGroupByOutputType[P]>
        }
      >
    >


  export type CustomerConsumptionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    timestamp?: boolean
    sensorId?: boolean
    P?: boolean
    Q?: boolean
    Sensor?: boolean | SensorDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["customerConsumption"]>

  export type CustomerConsumptionSelectScalar = {
    timestamp?: boolean
    sensorId?: boolean
    P?: boolean
    Q?: boolean
  }

  export type CustomerConsumptionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Sensor?: boolean | SensorDefaultArgs<ExtArgs>
  }


  export type $CustomerConsumptionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "CustomerConsumption"
    objects: {
      Sensor: Prisma.$SensorPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      timestamp: Date
      sensorId: string
      P: number
      Q: number
    }, ExtArgs["result"]["customerConsumption"]>
    composites: {}
  }


  type CustomerConsumptionGetPayload<S extends boolean | null | undefined | CustomerConsumptionDefaultArgs> = $Result.GetResult<Prisma.$CustomerConsumptionPayload, S>

  type CustomerConsumptionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CustomerConsumptionFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: CustomerConsumptionCountAggregateInputType | true
    }

  export interface CustomerConsumptionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CustomerConsumption'], meta: { name: 'CustomerConsumption' } }
    /**
     * Find zero or one CustomerConsumption that matches the filter.
     * @param {CustomerConsumptionFindUniqueArgs} args - Arguments to find a CustomerConsumption
     * @example
     * // Get one CustomerConsumption
     * const customerConsumption = await prisma.customerConsumption.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends CustomerConsumptionFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, CustomerConsumptionFindUniqueArgs<ExtArgs>>
    ): Prisma__CustomerConsumptionClient<$Result.GetResult<Prisma.$CustomerConsumptionPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one CustomerConsumption that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {CustomerConsumptionFindUniqueOrThrowArgs} args - Arguments to find a CustomerConsumption
     * @example
     * // Get one CustomerConsumption
     * const customerConsumption = await prisma.customerConsumption.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends CustomerConsumptionFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, CustomerConsumptionFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__CustomerConsumptionClient<$Result.GetResult<Prisma.$CustomerConsumptionPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first CustomerConsumption that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerConsumptionFindFirstArgs} args - Arguments to find a CustomerConsumption
     * @example
     * // Get one CustomerConsumption
     * const customerConsumption = await prisma.customerConsumption.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends CustomerConsumptionFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, CustomerConsumptionFindFirstArgs<ExtArgs>>
    ): Prisma__CustomerConsumptionClient<$Result.GetResult<Prisma.$CustomerConsumptionPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first CustomerConsumption that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerConsumptionFindFirstOrThrowArgs} args - Arguments to find a CustomerConsumption
     * @example
     * // Get one CustomerConsumption
     * const customerConsumption = await prisma.customerConsumption.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends CustomerConsumptionFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, CustomerConsumptionFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__CustomerConsumptionClient<$Result.GetResult<Prisma.$CustomerConsumptionPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more CustomerConsumptions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerConsumptionFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CustomerConsumptions
     * const customerConsumptions = await prisma.customerConsumption.findMany()
     * 
     * // Get first 10 CustomerConsumptions
     * const customerConsumptions = await prisma.customerConsumption.findMany({ take: 10 })
     * 
     * // Only select the `timestamp`
     * const customerConsumptionWithTimestampOnly = await prisma.customerConsumption.findMany({ select: { timestamp: true } })
     * 
    **/
    findMany<T extends CustomerConsumptionFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CustomerConsumptionFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CustomerConsumptionPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a CustomerConsumption.
     * @param {CustomerConsumptionCreateArgs} args - Arguments to create a CustomerConsumption.
     * @example
     * // Create one CustomerConsumption
     * const CustomerConsumption = await prisma.customerConsumption.create({
     *   data: {
     *     // ... data to create a CustomerConsumption
     *   }
     * })
     * 
    **/
    create<T extends CustomerConsumptionCreateArgs<ExtArgs>>(
      args: SelectSubset<T, CustomerConsumptionCreateArgs<ExtArgs>>
    ): Prisma__CustomerConsumptionClient<$Result.GetResult<Prisma.$CustomerConsumptionPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many CustomerConsumptions.
     *     @param {CustomerConsumptionCreateManyArgs} args - Arguments to create many CustomerConsumptions.
     *     @example
     *     // Create many CustomerConsumptions
     *     const customerConsumption = await prisma.customerConsumption.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends CustomerConsumptionCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CustomerConsumptionCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a CustomerConsumption.
     * @param {CustomerConsumptionDeleteArgs} args - Arguments to delete one CustomerConsumption.
     * @example
     * // Delete one CustomerConsumption
     * const CustomerConsumption = await prisma.customerConsumption.delete({
     *   where: {
     *     // ... filter to delete one CustomerConsumption
     *   }
     * })
     * 
    **/
    delete<T extends CustomerConsumptionDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, CustomerConsumptionDeleteArgs<ExtArgs>>
    ): Prisma__CustomerConsumptionClient<$Result.GetResult<Prisma.$CustomerConsumptionPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one CustomerConsumption.
     * @param {CustomerConsumptionUpdateArgs} args - Arguments to update one CustomerConsumption.
     * @example
     * // Update one CustomerConsumption
     * const customerConsumption = await prisma.customerConsumption.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends CustomerConsumptionUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, CustomerConsumptionUpdateArgs<ExtArgs>>
    ): Prisma__CustomerConsumptionClient<$Result.GetResult<Prisma.$CustomerConsumptionPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more CustomerConsumptions.
     * @param {CustomerConsumptionDeleteManyArgs} args - Arguments to filter CustomerConsumptions to delete.
     * @example
     * // Delete a few CustomerConsumptions
     * const { count } = await prisma.customerConsumption.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends CustomerConsumptionDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CustomerConsumptionDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CustomerConsumptions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerConsumptionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CustomerConsumptions
     * const customerConsumption = await prisma.customerConsumption.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends CustomerConsumptionUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, CustomerConsumptionUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one CustomerConsumption.
     * @param {CustomerConsumptionUpsertArgs} args - Arguments to update or create a CustomerConsumption.
     * @example
     * // Update or create a CustomerConsumption
     * const customerConsumption = await prisma.customerConsumption.upsert({
     *   create: {
     *     // ... data to create a CustomerConsumption
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CustomerConsumption we want to update
     *   }
     * })
    **/
    upsert<T extends CustomerConsumptionUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, CustomerConsumptionUpsertArgs<ExtArgs>>
    ): Prisma__CustomerConsumptionClient<$Result.GetResult<Prisma.$CustomerConsumptionPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of CustomerConsumptions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerConsumptionCountArgs} args - Arguments to filter CustomerConsumptions to count.
     * @example
     * // Count the number of CustomerConsumptions
     * const count = await prisma.customerConsumption.count({
     *   where: {
     *     // ... the filter for the CustomerConsumptions we want to count
     *   }
     * })
    **/
    count<T extends CustomerConsumptionCountArgs>(
      args?: Subset<T, CustomerConsumptionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CustomerConsumptionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CustomerConsumption.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerConsumptionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CustomerConsumptionAggregateArgs>(args: Subset<T, CustomerConsumptionAggregateArgs>): Prisma.PrismaPromise<GetCustomerConsumptionAggregateType<T>>

    /**
     * Group by CustomerConsumption.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerConsumptionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CustomerConsumptionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CustomerConsumptionGroupByArgs['orderBy'] }
        : { orderBy?: CustomerConsumptionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CustomerConsumptionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCustomerConsumptionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the CustomerConsumption model
   */
  readonly fields: CustomerConsumptionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for CustomerConsumption.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CustomerConsumptionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    Sensor<T extends SensorDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SensorDefaultArgs<ExtArgs>>): Prisma__SensorClient<$Result.GetResult<Prisma.$SensorPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the CustomerConsumption model
   */ 
  interface CustomerConsumptionFieldRefs {
    readonly timestamp: FieldRef<"CustomerConsumption", 'DateTime'>
    readonly sensorId: FieldRef<"CustomerConsumption", 'String'>
    readonly P: FieldRef<"CustomerConsumption", 'Float'>
    readonly Q: FieldRef<"CustomerConsumption", 'Float'>
  }
    

  // Custom InputTypes

  /**
   * CustomerConsumption findUnique
   */
  export type CustomerConsumptionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomerConsumption
     */
    select?: CustomerConsumptionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CustomerConsumptionInclude<ExtArgs> | null
    /**
     * Filter, which CustomerConsumption to fetch.
     */
    where: CustomerConsumptionWhereUniqueInput
  }


  /**
   * CustomerConsumption findUniqueOrThrow
   */
  export type CustomerConsumptionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomerConsumption
     */
    select?: CustomerConsumptionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CustomerConsumptionInclude<ExtArgs> | null
    /**
     * Filter, which CustomerConsumption to fetch.
     */
    where: CustomerConsumptionWhereUniqueInput
  }


  /**
   * CustomerConsumption findFirst
   */
  export type CustomerConsumptionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomerConsumption
     */
    select?: CustomerConsumptionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CustomerConsumptionInclude<ExtArgs> | null
    /**
     * Filter, which CustomerConsumption to fetch.
     */
    where?: CustomerConsumptionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CustomerConsumptions to fetch.
     */
    orderBy?: CustomerConsumptionOrderByWithRelationInput | CustomerConsumptionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CustomerConsumptions.
     */
    cursor?: CustomerConsumptionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CustomerConsumptions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CustomerConsumptions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CustomerConsumptions.
     */
    distinct?: CustomerConsumptionScalarFieldEnum | CustomerConsumptionScalarFieldEnum[]
  }


  /**
   * CustomerConsumption findFirstOrThrow
   */
  export type CustomerConsumptionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomerConsumption
     */
    select?: CustomerConsumptionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CustomerConsumptionInclude<ExtArgs> | null
    /**
     * Filter, which CustomerConsumption to fetch.
     */
    where?: CustomerConsumptionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CustomerConsumptions to fetch.
     */
    orderBy?: CustomerConsumptionOrderByWithRelationInput | CustomerConsumptionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CustomerConsumptions.
     */
    cursor?: CustomerConsumptionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CustomerConsumptions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CustomerConsumptions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CustomerConsumptions.
     */
    distinct?: CustomerConsumptionScalarFieldEnum | CustomerConsumptionScalarFieldEnum[]
  }


  /**
   * CustomerConsumption findMany
   */
  export type CustomerConsumptionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomerConsumption
     */
    select?: CustomerConsumptionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CustomerConsumptionInclude<ExtArgs> | null
    /**
     * Filter, which CustomerConsumptions to fetch.
     */
    where?: CustomerConsumptionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CustomerConsumptions to fetch.
     */
    orderBy?: CustomerConsumptionOrderByWithRelationInput | CustomerConsumptionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CustomerConsumptions.
     */
    cursor?: CustomerConsumptionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CustomerConsumptions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CustomerConsumptions.
     */
    skip?: number
    distinct?: CustomerConsumptionScalarFieldEnum | CustomerConsumptionScalarFieldEnum[]
  }


  /**
   * CustomerConsumption create
   */
  export type CustomerConsumptionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomerConsumption
     */
    select?: CustomerConsumptionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CustomerConsumptionInclude<ExtArgs> | null
    /**
     * The data needed to create a CustomerConsumption.
     */
    data: XOR<CustomerConsumptionCreateInput, CustomerConsumptionUncheckedCreateInput>
  }


  /**
   * CustomerConsumption createMany
   */
  export type CustomerConsumptionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many CustomerConsumptions.
     */
    data: CustomerConsumptionCreateManyInput | CustomerConsumptionCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * CustomerConsumption update
   */
  export type CustomerConsumptionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomerConsumption
     */
    select?: CustomerConsumptionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CustomerConsumptionInclude<ExtArgs> | null
    /**
     * The data needed to update a CustomerConsumption.
     */
    data: XOR<CustomerConsumptionUpdateInput, CustomerConsumptionUncheckedUpdateInput>
    /**
     * Choose, which CustomerConsumption to update.
     */
    where: CustomerConsumptionWhereUniqueInput
  }


  /**
   * CustomerConsumption updateMany
   */
  export type CustomerConsumptionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update CustomerConsumptions.
     */
    data: XOR<CustomerConsumptionUpdateManyMutationInput, CustomerConsumptionUncheckedUpdateManyInput>
    /**
     * Filter which CustomerConsumptions to update
     */
    where?: CustomerConsumptionWhereInput
  }


  /**
   * CustomerConsumption upsert
   */
  export type CustomerConsumptionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomerConsumption
     */
    select?: CustomerConsumptionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CustomerConsumptionInclude<ExtArgs> | null
    /**
     * The filter to search for the CustomerConsumption to update in case it exists.
     */
    where: CustomerConsumptionWhereUniqueInput
    /**
     * In case the CustomerConsumption found by the `where` argument doesn't exist, create a new CustomerConsumption with this data.
     */
    create: XOR<CustomerConsumptionCreateInput, CustomerConsumptionUncheckedCreateInput>
    /**
     * In case the CustomerConsumption was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CustomerConsumptionUpdateInput, CustomerConsumptionUncheckedUpdateInput>
  }


  /**
   * CustomerConsumption delete
   */
  export type CustomerConsumptionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomerConsumption
     */
    select?: CustomerConsumptionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CustomerConsumptionInclude<ExtArgs> | null
    /**
     * Filter which CustomerConsumption to delete.
     */
    where: CustomerConsumptionWhereUniqueInput
  }


  /**
   * CustomerConsumption deleteMany
   */
  export type CustomerConsumptionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CustomerConsumptions to delete
     */
    where?: CustomerConsumptionWhereInput
  }


  /**
   * CustomerConsumption without action
   */
  export type CustomerConsumptionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomerConsumption
     */
    select?: CustomerConsumptionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CustomerConsumptionInclude<ExtArgs> | null
  }



  /**
   * Model Loss
   */

  export type AggregateLoss = {
    _count: LossCountAggregateOutputType | null
    _avg: LossAvgAggregateOutputType | null
    _sum: LossSumAggregateOutputType | null
    _min: LossMinAggregateOutputType | null
    _max: LossMaxAggregateOutputType | null
  }

  export type LossAvgAggregateOutputType = {
    loss: number | null
  }

  export type LossSumAggregateOutputType = {
    loss: number | null
  }

  export type LossMinAggregateOutputType = {
    timestamp: Date | null
    feeder: string | null
    segment: string | null
    loss: number | null
  }

  export type LossMaxAggregateOutputType = {
    timestamp: Date | null
    feeder: string | null
    segment: string | null
    loss: number | null
  }

  export type LossCountAggregateOutputType = {
    timestamp: number
    feeder: number
    segment: number
    loss: number
    _all: number
  }


  export type LossAvgAggregateInputType = {
    loss?: true
  }

  export type LossSumAggregateInputType = {
    loss?: true
  }

  export type LossMinAggregateInputType = {
    timestamp?: true
    feeder?: true
    segment?: true
    loss?: true
  }

  export type LossMaxAggregateInputType = {
    timestamp?: true
    feeder?: true
    segment?: true
    loss?: true
  }

  export type LossCountAggregateInputType = {
    timestamp?: true
    feeder?: true
    segment?: true
    loss?: true
    _all?: true
  }

  export type LossAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Loss to aggregate.
     */
    where?: LossWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Losses to fetch.
     */
    orderBy?: LossOrderByWithRelationInput | LossOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: LossWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Losses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Losses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Losses
    **/
    _count?: true | LossCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: LossAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: LossSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LossMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LossMaxAggregateInputType
  }

  export type GetLossAggregateType<T extends LossAggregateArgs> = {
        [P in keyof T & keyof AggregateLoss]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLoss[P]>
      : GetScalarType<T[P], AggregateLoss[P]>
  }




  export type LossGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LossWhereInput
    orderBy?: LossOrderByWithAggregationInput | LossOrderByWithAggregationInput[]
    by: LossScalarFieldEnum[] | LossScalarFieldEnum
    having?: LossScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LossCountAggregateInputType | true
    _avg?: LossAvgAggregateInputType
    _sum?: LossSumAggregateInputType
    _min?: LossMinAggregateInputType
    _max?: LossMaxAggregateInputType
  }

  export type LossGroupByOutputType = {
    timestamp: Date
    feeder: string
    segment: string
    loss: number
    _count: LossCountAggregateOutputType | null
    _avg: LossAvgAggregateOutputType | null
    _sum: LossSumAggregateOutputType | null
    _min: LossMinAggregateOutputType | null
    _max: LossMaxAggregateOutputType | null
  }

  type GetLossGroupByPayload<T extends LossGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<LossGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof LossGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], LossGroupByOutputType[P]>
            : GetScalarType<T[P], LossGroupByOutputType[P]>
        }
      >
    >


  export type LossSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    timestamp?: boolean
    feeder?: boolean
    segment?: boolean
    loss?: boolean
  }, ExtArgs["result"]["loss"]>

  export type LossSelectScalar = {
    timestamp?: boolean
    feeder?: boolean
    segment?: boolean
    loss?: boolean
  }


  export type $LossPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Loss"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      timestamp: Date
      feeder: string
      segment: string
      loss: number
    }, ExtArgs["result"]["loss"]>
    composites: {}
  }


  type LossGetPayload<S extends boolean | null | undefined | LossDefaultArgs> = $Result.GetResult<Prisma.$LossPayload, S>

  type LossCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<LossFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: LossCountAggregateInputType | true
    }

  export interface LossDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Loss'], meta: { name: 'Loss' } }
    /**
     * Find zero or one Loss that matches the filter.
     * @param {LossFindUniqueArgs} args - Arguments to find a Loss
     * @example
     * // Get one Loss
     * const loss = await prisma.loss.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends LossFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, LossFindUniqueArgs<ExtArgs>>
    ): Prisma__LossClient<$Result.GetResult<Prisma.$LossPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Loss that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {LossFindUniqueOrThrowArgs} args - Arguments to find a Loss
     * @example
     * // Get one Loss
     * const loss = await prisma.loss.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends LossFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, LossFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__LossClient<$Result.GetResult<Prisma.$LossPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Loss that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LossFindFirstArgs} args - Arguments to find a Loss
     * @example
     * // Get one Loss
     * const loss = await prisma.loss.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends LossFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, LossFindFirstArgs<ExtArgs>>
    ): Prisma__LossClient<$Result.GetResult<Prisma.$LossPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Loss that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LossFindFirstOrThrowArgs} args - Arguments to find a Loss
     * @example
     * // Get one Loss
     * const loss = await prisma.loss.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends LossFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, LossFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__LossClient<$Result.GetResult<Prisma.$LossPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Losses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LossFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Losses
     * const losses = await prisma.loss.findMany()
     * 
     * // Get first 10 Losses
     * const losses = await prisma.loss.findMany({ take: 10 })
     * 
     * // Only select the `timestamp`
     * const lossWithTimestampOnly = await prisma.loss.findMany({ select: { timestamp: true } })
     * 
    **/
    findMany<T extends LossFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, LossFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LossPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Loss.
     * @param {LossCreateArgs} args - Arguments to create a Loss.
     * @example
     * // Create one Loss
     * const Loss = await prisma.loss.create({
     *   data: {
     *     // ... data to create a Loss
     *   }
     * })
     * 
    **/
    create<T extends LossCreateArgs<ExtArgs>>(
      args: SelectSubset<T, LossCreateArgs<ExtArgs>>
    ): Prisma__LossClient<$Result.GetResult<Prisma.$LossPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Losses.
     *     @param {LossCreateManyArgs} args - Arguments to create many Losses.
     *     @example
     *     // Create many Losses
     *     const loss = await prisma.loss.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends LossCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, LossCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Loss.
     * @param {LossDeleteArgs} args - Arguments to delete one Loss.
     * @example
     * // Delete one Loss
     * const Loss = await prisma.loss.delete({
     *   where: {
     *     // ... filter to delete one Loss
     *   }
     * })
     * 
    **/
    delete<T extends LossDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, LossDeleteArgs<ExtArgs>>
    ): Prisma__LossClient<$Result.GetResult<Prisma.$LossPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Loss.
     * @param {LossUpdateArgs} args - Arguments to update one Loss.
     * @example
     * // Update one Loss
     * const loss = await prisma.loss.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends LossUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, LossUpdateArgs<ExtArgs>>
    ): Prisma__LossClient<$Result.GetResult<Prisma.$LossPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Losses.
     * @param {LossDeleteManyArgs} args - Arguments to filter Losses to delete.
     * @example
     * // Delete a few Losses
     * const { count } = await prisma.loss.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends LossDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, LossDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Losses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LossUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Losses
     * const loss = await prisma.loss.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends LossUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, LossUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Loss.
     * @param {LossUpsertArgs} args - Arguments to update or create a Loss.
     * @example
     * // Update or create a Loss
     * const loss = await prisma.loss.upsert({
     *   create: {
     *     // ... data to create a Loss
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Loss we want to update
     *   }
     * })
    **/
    upsert<T extends LossUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, LossUpsertArgs<ExtArgs>>
    ): Prisma__LossClient<$Result.GetResult<Prisma.$LossPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Losses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LossCountArgs} args - Arguments to filter Losses to count.
     * @example
     * // Count the number of Losses
     * const count = await prisma.loss.count({
     *   where: {
     *     // ... the filter for the Losses we want to count
     *   }
     * })
    **/
    count<T extends LossCountArgs>(
      args?: Subset<T, LossCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LossCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Loss.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LossAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LossAggregateArgs>(args: Subset<T, LossAggregateArgs>): Prisma.PrismaPromise<GetLossAggregateType<T>>

    /**
     * Group by Loss.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LossGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends LossGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: LossGroupByArgs['orderBy'] }
        : { orderBy?: LossGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, LossGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLossGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Loss model
   */
  readonly fields: LossFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Loss.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__LossClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';


    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Loss model
   */ 
  interface LossFieldRefs {
    readonly timestamp: FieldRef<"Loss", 'DateTime'>
    readonly feeder: FieldRef<"Loss", 'String'>
    readonly segment: FieldRef<"Loss", 'String'>
    readonly loss: FieldRef<"Loss", 'Float'>
  }
    

  // Custom InputTypes

  /**
   * Loss findUnique
   */
  export type LossFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Loss
     */
    select?: LossSelect<ExtArgs> | null
    /**
     * Filter, which Loss to fetch.
     */
    where: LossWhereUniqueInput
  }


  /**
   * Loss findUniqueOrThrow
   */
  export type LossFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Loss
     */
    select?: LossSelect<ExtArgs> | null
    /**
     * Filter, which Loss to fetch.
     */
    where: LossWhereUniqueInput
  }


  /**
   * Loss findFirst
   */
  export type LossFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Loss
     */
    select?: LossSelect<ExtArgs> | null
    /**
     * Filter, which Loss to fetch.
     */
    where?: LossWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Losses to fetch.
     */
    orderBy?: LossOrderByWithRelationInput | LossOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Losses.
     */
    cursor?: LossWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Losses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Losses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Losses.
     */
    distinct?: LossScalarFieldEnum | LossScalarFieldEnum[]
  }


  /**
   * Loss findFirstOrThrow
   */
  export type LossFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Loss
     */
    select?: LossSelect<ExtArgs> | null
    /**
     * Filter, which Loss to fetch.
     */
    where?: LossWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Losses to fetch.
     */
    orderBy?: LossOrderByWithRelationInput | LossOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Losses.
     */
    cursor?: LossWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Losses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Losses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Losses.
     */
    distinct?: LossScalarFieldEnum | LossScalarFieldEnum[]
  }


  /**
   * Loss findMany
   */
  export type LossFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Loss
     */
    select?: LossSelect<ExtArgs> | null
    /**
     * Filter, which Losses to fetch.
     */
    where?: LossWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Losses to fetch.
     */
    orderBy?: LossOrderByWithRelationInput | LossOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Losses.
     */
    cursor?: LossWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Losses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Losses.
     */
    skip?: number
    distinct?: LossScalarFieldEnum | LossScalarFieldEnum[]
  }


  /**
   * Loss create
   */
  export type LossCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Loss
     */
    select?: LossSelect<ExtArgs> | null
    /**
     * The data needed to create a Loss.
     */
    data: XOR<LossCreateInput, LossUncheckedCreateInput>
  }


  /**
   * Loss createMany
   */
  export type LossCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Losses.
     */
    data: LossCreateManyInput | LossCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Loss update
   */
  export type LossUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Loss
     */
    select?: LossSelect<ExtArgs> | null
    /**
     * The data needed to update a Loss.
     */
    data: XOR<LossUpdateInput, LossUncheckedUpdateInput>
    /**
     * Choose, which Loss to update.
     */
    where: LossWhereUniqueInput
  }


  /**
   * Loss updateMany
   */
  export type LossUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Losses.
     */
    data: XOR<LossUpdateManyMutationInput, LossUncheckedUpdateManyInput>
    /**
     * Filter which Losses to update
     */
    where?: LossWhereInput
  }


  /**
   * Loss upsert
   */
  export type LossUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Loss
     */
    select?: LossSelect<ExtArgs> | null
    /**
     * The filter to search for the Loss to update in case it exists.
     */
    where: LossWhereUniqueInput
    /**
     * In case the Loss found by the `where` argument doesn't exist, create a new Loss with this data.
     */
    create: XOR<LossCreateInput, LossUncheckedCreateInput>
    /**
     * In case the Loss was found with the provided `where` argument, update it with this data.
     */
    update: XOR<LossUpdateInput, LossUncheckedUpdateInput>
  }


  /**
   * Loss delete
   */
  export type LossDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Loss
     */
    select?: LossSelect<ExtArgs> | null
    /**
     * Filter which Loss to delete.
     */
    where: LossWhereUniqueInput
  }


  /**
   * Loss deleteMany
   */
  export type LossDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Losses to delete
     */
    where?: LossWhereInput
  }


  /**
   * Loss without action
   */
  export type LossDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Loss
     */
    select?: LossSelect<ExtArgs> | null
  }



  /**
   * Model Power
   */

  export type AggregatePower = {
    _count: PowerCountAggregateOutputType | null
    _avg: PowerAvgAggregateOutputType | null
    _sum: PowerSumAggregateOutputType | null
    _min: PowerMinAggregateOutputType | null
    _max: PowerMaxAggregateOutputType | null
  }

  export type PowerAvgAggregateOutputType = {
    Pfeed: number | null
    Qfeed: number | null
    Pagg: number | null
    Qagg: number | null
    faultType: number | null
  }

  export type PowerSumAggregateOutputType = {
    Pfeed: number | null
    Qfeed: number | null
    Pagg: number | null
    Qagg: number | null
    faultType: number | null
  }

  export type PowerMinAggregateOutputType = {
    timestamp: Date | null
    sensorId: string | null
    Pfeed: number | null
    Qfeed: number | null
    Pagg: number | null
    Qagg: number | null
    faultType: number | null
  }

  export type PowerMaxAggregateOutputType = {
    timestamp: Date | null
    sensorId: string | null
    Pfeed: number | null
    Qfeed: number | null
    Pagg: number | null
    Qagg: number | null
    faultType: number | null
  }

  export type PowerCountAggregateOutputType = {
    timestamp: number
    sensorId: number
    Pfeed: number
    Qfeed: number
    Pagg: number
    Qagg: number
    faultType: number
    _all: number
  }


  export type PowerAvgAggregateInputType = {
    Pfeed?: true
    Qfeed?: true
    Pagg?: true
    Qagg?: true
    faultType?: true
  }

  export type PowerSumAggregateInputType = {
    Pfeed?: true
    Qfeed?: true
    Pagg?: true
    Qagg?: true
    faultType?: true
  }

  export type PowerMinAggregateInputType = {
    timestamp?: true
    sensorId?: true
    Pfeed?: true
    Qfeed?: true
    Pagg?: true
    Qagg?: true
    faultType?: true
  }

  export type PowerMaxAggregateInputType = {
    timestamp?: true
    sensorId?: true
    Pfeed?: true
    Qfeed?: true
    Pagg?: true
    Qagg?: true
    faultType?: true
  }

  export type PowerCountAggregateInputType = {
    timestamp?: true
    sensorId?: true
    Pfeed?: true
    Qfeed?: true
    Pagg?: true
    Qagg?: true
    faultType?: true
    _all?: true
  }

  export type PowerAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Power to aggregate.
     */
    where?: PowerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Powers to fetch.
     */
    orderBy?: PowerOrderByWithRelationInput | PowerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PowerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Powers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Powers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Powers
    **/
    _count?: true | PowerCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PowerAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PowerSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PowerMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PowerMaxAggregateInputType
  }

  export type GetPowerAggregateType<T extends PowerAggregateArgs> = {
        [P in keyof T & keyof AggregatePower]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePower[P]>
      : GetScalarType<T[P], AggregatePower[P]>
  }




  export type PowerGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PowerWhereInput
    orderBy?: PowerOrderByWithAggregationInput | PowerOrderByWithAggregationInput[]
    by: PowerScalarFieldEnum[] | PowerScalarFieldEnum
    having?: PowerScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PowerCountAggregateInputType | true
    _avg?: PowerAvgAggregateInputType
    _sum?: PowerSumAggregateInputType
    _min?: PowerMinAggregateInputType
    _max?: PowerMaxAggregateInputType
  }

  export type PowerGroupByOutputType = {
    timestamp: Date
    sensorId: string
    Pfeed: number
    Qfeed: number
    Pagg: number
    Qagg: number
    faultType: number | null
    _count: PowerCountAggregateOutputType | null
    _avg: PowerAvgAggregateOutputType | null
    _sum: PowerSumAggregateOutputType | null
    _min: PowerMinAggregateOutputType | null
    _max: PowerMaxAggregateOutputType | null
  }

  type GetPowerGroupByPayload<T extends PowerGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PowerGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PowerGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PowerGroupByOutputType[P]>
            : GetScalarType<T[P], PowerGroupByOutputType[P]>
        }
      >
    >


  export type PowerSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    timestamp?: boolean
    sensorId?: boolean
    Pfeed?: boolean
    Qfeed?: boolean
    Pagg?: boolean
    Qagg?: boolean
    faultType?: boolean
    Sensor?: boolean | SensorDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["power"]>

  export type PowerSelectScalar = {
    timestamp?: boolean
    sensorId?: boolean
    Pfeed?: boolean
    Qfeed?: boolean
    Pagg?: boolean
    Qagg?: boolean
    faultType?: boolean
  }

  export type PowerInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Sensor?: boolean | SensorDefaultArgs<ExtArgs>
  }


  export type $PowerPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Power"
    objects: {
      Sensor: Prisma.$SensorPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      timestamp: Date
      sensorId: string
      Pfeed: number
      Qfeed: number
      Pagg: number
      Qagg: number
      faultType: number | null
    }, ExtArgs["result"]["power"]>
    composites: {}
  }


  type PowerGetPayload<S extends boolean | null | undefined | PowerDefaultArgs> = $Result.GetResult<Prisma.$PowerPayload, S>

  type PowerCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<PowerFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: PowerCountAggregateInputType | true
    }

  export interface PowerDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Power'], meta: { name: 'Power' } }
    /**
     * Find zero or one Power that matches the filter.
     * @param {PowerFindUniqueArgs} args - Arguments to find a Power
     * @example
     * // Get one Power
     * const power = await prisma.power.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends PowerFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, PowerFindUniqueArgs<ExtArgs>>
    ): Prisma__PowerClient<$Result.GetResult<Prisma.$PowerPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Power that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {PowerFindUniqueOrThrowArgs} args - Arguments to find a Power
     * @example
     * // Get one Power
     * const power = await prisma.power.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends PowerFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, PowerFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__PowerClient<$Result.GetResult<Prisma.$PowerPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Power that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PowerFindFirstArgs} args - Arguments to find a Power
     * @example
     * // Get one Power
     * const power = await prisma.power.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends PowerFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, PowerFindFirstArgs<ExtArgs>>
    ): Prisma__PowerClient<$Result.GetResult<Prisma.$PowerPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Power that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PowerFindFirstOrThrowArgs} args - Arguments to find a Power
     * @example
     * // Get one Power
     * const power = await prisma.power.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends PowerFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, PowerFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__PowerClient<$Result.GetResult<Prisma.$PowerPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Powers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PowerFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Powers
     * const powers = await prisma.power.findMany()
     * 
     * // Get first 10 Powers
     * const powers = await prisma.power.findMany({ take: 10 })
     * 
     * // Only select the `timestamp`
     * const powerWithTimestampOnly = await prisma.power.findMany({ select: { timestamp: true } })
     * 
    **/
    findMany<T extends PowerFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PowerFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PowerPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Power.
     * @param {PowerCreateArgs} args - Arguments to create a Power.
     * @example
     * // Create one Power
     * const Power = await prisma.power.create({
     *   data: {
     *     // ... data to create a Power
     *   }
     * })
     * 
    **/
    create<T extends PowerCreateArgs<ExtArgs>>(
      args: SelectSubset<T, PowerCreateArgs<ExtArgs>>
    ): Prisma__PowerClient<$Result.GetResult<Prisma.$PowerPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Powers.
     *     @param {PowerCreateManyArgs} args - Arguments to create many Powers.
     *     @example
     *     // Create many Powers
     *     const power = await prisma.power.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends PowerCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PowerCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Power.
     * @param {PowerDeleteArgs} args - Arguments to delete one Power.
     * @example
     * // Delete one Power
     * const Power = await prisma.power.delete({
     *   where: {
     *     // ... filter to delete one Power
     *   }
     * })
     * 
    **/
    delete<T extends PowerDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, PowerDeleteArgs<ExtArgs>>
    ): Prisma__PowerClient<$Result.GetResult<Prisma.$PowerPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Power.
     * @param {PowerUpdateArgs} args - Arguments to update one Power.
     * @example
     * // Update one Power
     * const power = await prisma.power.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends PowerUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, PowerUpdateArgs<ExtArgs>>
    ): Prisma__PowerClient<$Result.GetResult<Prisma.$PowerPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Powers.
     * @param {PowerDeleteManyArgs} args - Arguments to filter Powers to delete.
     * @example
     * // Delete a few Powers
     * const { count } = await prisma.power.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends PowerDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PowerDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Powers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PowerUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Powers
     * const power = await prisma.power.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends PowerUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, PowerUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Power.
     * @param {PowerUpsertArgs} args - Arguments to update or create a Power.
     * @example
     * // Update or create a Power
     * const power = await prisma.power.upsert({
     *   create: {
     *     // ... data to create a Power
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Power we want to update
     *   }
     * })
    **/
    upsert<T extends PowerUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, PowerUpsertArgs<ExtArgs>>
    ): Prisma__PowerClient<$Result.GetResult<Prisma.$PowerPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Powers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PowerCountArgs} args - Arguments to filter Powers to count.
     * @example
     * // Count the number of Powers
     * const count = await prisma.power.count({
     *   where: {
     *     // ... the filter for the Powers we want to count
     *   }
     * })
    **/
    count<T extends PowerCountArgs>(
      args?: Subset<T, PowerCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PowerCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Power.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PowerAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PowerAggregateArgs>(args: Subset<T, PowerAggregateArgs>): Prisma.PrismaPromise<GetPowerAggregateType<T>>

    /**
     * Group by Power.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PowerGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PowerGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PowerGroupByArgs['orderBy'] }
        : { orderBy?: PowerGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PowerGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPowerGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Power model
   */
  readonly fields: PowerFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Power.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PowerClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    Sensor<T extends SensorDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SensorDefaultArgs<ExtArgs>>): Prisma__SensorClient<$Result.GetResult<Prisma.$SensorPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Power model
   */ 
  interface PowerFieldRefs {
    readonly timestamp: FieldRef<"Power", 'DateTime'>
    readonly sensorId: FieldRef<"Power", 'String'>
    readonly Pfeed: FieldRef<"Power", 'Float'>
    readonly Qfeed: FieldRef<"Power", 'Float'>
    readonly Pagg: FieldRef<"Power", 'Float'>
    readonly Qagg: FieldRef<"Power", 'Float'>
    readonly faultType: FieldRef<"Power", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * Power findUnique
   */
  export type PowerFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Power
     */
    select?: PowerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PowerInclude<ExtArgs> | null
    /**
     * Filter, which Power to fetch.
     */
    where: PowerWhereUniqueInput
  }


  /**
   * Power findUniqueOrThrow
   */
  export type PowerFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Power
     */
    select?: PowerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PowerInclude<ExtArgs> | null
    /**
     * Filter, which Power to fetch.
     */
    where: PowerWhereUniqueInput
  }


  /**
   * Power findFirst
   */
  export type PowerFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Power
     */
    select?: PowerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PowerInclude<ExtArgs> | null
    /**
     * Filter, which Power to fetch.
     */
    where?: PowerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Powers to fetch.
     */
    orderBy?: PowerOrderByWithRelationInput | PowerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Powers.
     */
    cursor?: PowerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Powers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Powers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Powers.
     */
    distinct?: PowerScalarFieldEnum | PowerScalarFieldEnum[]
  }


  /**
   * Power findFirstOrThrow
   */
  export type PowerFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Power
     */
    select?: PowerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PowerInclude<ExtArgs> | null
    /**
     * Filter, which Power to fetch.
     */
    where?: PowerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Powers to fetch.
     */
    orderBy?: PowerOrderByWithRelationInput | PowerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Powers.
     */
    cursor?: PowerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Powers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Powers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Powers.
     */
    distinct?: PowerScalarFieldEnum | PowerScalarFieldEnum[]
  }


  /**
   * Power findMany
   */
  export type PowerFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Power
     */
    select?: PowerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PowerInclude<ExtArgs> | null
    /**
     * Filter, which Powers to fetch.
     */
    where?: PowerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Powers to fetch.
     */
    orderBy?: PowerOrderByWithRelationInput | PowerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Powers.
     */
    cursor?: PowerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Powers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Powers.
     */
    skip?: number
    distinct?: PowerScalarFieldEnum | PowerScalarFieldEnum[]
  }


  /**
   * Power create
   */
  export type PowerCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Power
     */
    select?: PowerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PowerInclude<ExtArgs> | null
    /**
     * The data needed to create a Power.
     */
    data: XOR<PowerCreateInput, PowerUncheckedCreateInput>
  }


  /**
   * Power createMany
   */
  export type PowerCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Powers.
     */
    data: PowerCreateManyInput | PowerCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Power update
   */
  export type PowerUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Power
     */
    select?: PowerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PowerInclude<ExtArgs> | null
    /**
     * The data needed to update a Power.
     */
    data: XOR<PowerUpdateInput, PowerUncheckedUpdateInput>
    /**
     * Choose, which Power to update.
     */
    where: PowerWhereUniqueInput
  }


  /**
   * Power updateMany
   */
  export type PowerUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Powers.
     */
    data: XOR<PowerUpdateManyMutationInput, PowerUncheckedUpdateManyInput>
    /**
     * Filter which Powers to update
     */
    where?: PowerWhereInput
  }


  /**
   * Power upsert
   */
  export type PowerUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Power
     */
    select?: PowerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PowerInclude<ExtArgs> | null
    /**
     * The filter to search for the Power to update in case it exists.
     */
    where: PowerWhereUniqueInput
    /**
     * In case the Power found by the `where` argument doesn't exist, create a new Power with this data.
     */
    create: XOR<PowerCreateInput, PowerUncheckedCreateInput>
    /**
     * In case the Power was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PowerUpdateInput, PowerUncheckedUpdateInput>
  }


  /**
   * Power delete
   */
  export type PowerDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Power
     */
    select?: PowerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PowerInclude<ExtArgs> | null
    /**
     * Filter which Power to delete.
     */
    where: PowerWhereUniqueInput
  }


  /**
   * Power deleteMany
   */
  export type PowerDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Powers to delete
     */
    where?: PowerWhereInput
  }


  /**
   * Power without action
   */
  export type PowerDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Power
     */
    select?: PowerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PowerInclude<ExtArgs> | null
  }



  /**
   * Model Sensor
   */

  export type AggregateSensor = {
    _count: SensorCountAggregateOutputType | null
    _avg: SensorAvgAggregateOutputType | null
    _sum: SensorSumAggregateOutputType | null
    _min: SensorMinAggregateOutputType | null
    _max: SensorMaxAggregateOutputType | null
  }

  export type SensorAvgAggregateOutputType = {
    latitude: number | null
    longitude: number | null
  }

  export type SensorSumAggregateOutputType = {
    latitude: number | null
    longitude: number | null
  }

  export type SensorMinAggregateOutputType = {
    id: string | null
    type: string | null
    feeder: string | null
    latitude: number | null
    longitude: number | null
    segment: string | null
  }

  export type SensorMaxAggregateOutputType = {
    id: string | null
    type: string | null
    feeder: string | null
    latitude: number | null
    longitude: number | null
    segment: string | null
  }

  export type SensorCountAggregateOutputType = {
    id: number
    type: number
    feeder: number
    latitude: number
    longitude: number
    segment: number
    _all: number
  }


  export type SensorAvgAggregateInputType = {
    latitude?: true
    longitude?: true
  }

  export type SensorSumAggregateInputType = {
    latitude?: true
    longitude?: true
  }

  export type SensorMinAggregateInputType = {
    id?: true
    type?: true
    feeder?: true
    latitude?: true
    longitude?: true
    segment?: true
  }

  export type SensorMaxAggregateInputType = {
    id?: true
    type?: true
    feeder?: true
    latitude?: true
    longitude?: true
    segment?: true
  }

  export type SensorCountAggregateInputType = {
    id?: true
    type?: true
    feeder?: true
    latitude?: true
    longitude?: true
    segment?: true
    _all?: true
  }

  export type SensorAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Sensor to aggregate.
     */
    where?: SensorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sensors to fetch.
     */
    orderBy?: SensorOrderByWithRelationInput | SensorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SensorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sensors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sensors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Sensors
    **/
    _count?: true | SensorCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SensorAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SensorSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SensorMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SensorMaxAggregateInputType
  }

  export type GetSensorAggregateType<T extends SensorAggregateArgs> = {
        [P in keyof T & keyof AggregateSensor]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSensor[P]>
      : GetScalarType<T[P], AggregateSensor[P]>
  }




  export type SensorGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SensorWhereInput
    orderBy?: SensorOrderByWithAggregationInput | SensorOrderByWithAggregationInput[]
    by: SensorScalarFieldEnum[] | SensorScalarFieldEnum
    having?: SensorScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SensorCountAggregateInputType | true
    _avg?: SensorAvgAggregateInputType
    _sum?: SensorSumAggregateInputType
    _min?: SensorMinAggregateInputType
    _max?: SensorMaxAggregateInputType
  }

  export type SensorGroupByOutputType = {
    id: string
    type: string
    feeder: string
    latitude: number | null
    longitude: number | null
    segment: string | null
    _count: SensorCountAggregateOutputType | null
    _avg: SensorAvgAggregateOutputType | null
    _sum: SensorSumAggregateOutputType | null
    _min: SensorMinAggregateOutputType | null
    _max: SensorMaxAggregateOutputType | null
  }

  type GetSensorGroupByPayload<T extends SensorGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SensorGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SensorGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SensorGroupByOutputType[P]>
            : GetScalarType<T[P], SensorGroupByOutputType[P]>
        }
      >
    >


  export type SensorSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    type?: boolean
    feeder?: boolean
    latitude?: boolean
    longitude?: boolean
    segment?: boolean
    CustomerConsumption?: boolean | Sensor$CustomerConsumptionArgs<ExtArgs>
    Power?: boolean | Sensor$PowerArgs<ExtArgs>
    SubStationPower?: boolean | Sensor$SubStationPowerArgs<ExtArgs>
    VoltageCurrent?: boolean | Sensor$VoltageCurrentArgs<ExtArgs>
    _count?: boolean | SensorCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["sensor"]>

  export type SensorSelectScalar = {
    id?: boolean
    type?: boolean
    feeder?: boolean
    latitude?: boolean
    longitude?: boolean
    segment?: boolean
  }

  export type SensorInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    CustomerConsumption?: boolean | Sensor$CustomerConsumptionArgs<ExtArgs>
    Power?: boolean | Sensor$PowerArgs<ExtArgs>
    SubStationPower?: boolean | Sensor$SubStationPowerArgs<ExtArgs>
    VoltageCurrent?: boolean | Sensor$VoltageCurrentArgs<ExtArgs>
    _count?: boolean | SensorCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $SensorPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Sensor"
    objects: {
      CustomerConsumption: Prisma.$CustomerConsumptionPayload<ExtArgs>[]
      Power: Prisma.$PowerPayload<ExtArgs>[]
      SubStationPower: Prisma.$SubStationPowerPayload<ExtArgs>[]
      VoltageCurrent: Prisma.$VoltageCurrentPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      type: string
      feeder: string
      latitude: number | null
      longitude: number | null
      segment: string | null
    }, ExtArgs["result"]["sensor"]>
    composites: {}
  }


  type SensorGetPayload<S extends boolean | null | undefined | SensorDefaultArgs> = $Result.GetResult<Prisma.$SensorPayload, S>

  type SensorCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<SensorFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: SensorCountAggregateInputType | true
    }

  export interface SensorDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Sensor'], meta: { name: 'Sensor' } }
    /**
     * Find zero or one Sensor that matches the filter.
     * @param {SensorFindUniqueArgs} args - Arguments to find a Sensor
     * @example
     * // Get one Sensor
     * const sensor = await prisma.sensor.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends SensorFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, SensorFindUniqueArgs<ExtArgs>>
    ): Prisma__SensorClient<$Result.GetResult<Prisma.$SensorPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Sensor that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {SensorFindUniqueOrThrowArgs} args - Arguments to find a Sensor
     * @example
     * // Get one Sensor
     * const sensor = await prisma.sensor.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends SensorFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, SensorFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__SensorClient<$Result.GetResult<Prisma.$SensorPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Sensor that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SensorFindFirstArgs} args - Arguments to find a Sensor
     * @example
     * // Get one Sensor
     * const sensor = await prisma.sensor.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends SensorFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, SensorFindFirstArgs<ExtArgs>>
    ): Prisma__SensorClient<$Result.GetResult<Prisma.$SensorPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Sensor that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SensorFindFirstOrThrowArgs} args - Arguments to find a Sensor
     * @example
     * // Get one Sensor
     * const sensor = await prisma.sensor.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends SensorFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, SensorFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__SensorClient<$Result.GetResult<Prisma.$SensorPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Sensors that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SensorFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Sensors
     * const sensors = await prisma.sensor.findMany()
     * 
     * // Get first 10 Sensors
     * const sensors = await prisma.sensor.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const sensorWithIdOnly = await prisma.sensor.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends SensorFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SensorFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SensorPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Sensor.
     * @param {SensorCreateArgs} args - Arguments to create a Sensor.
     * @example
     * // Create one Sensor
     * const Sensor = await prisma.sensor.create({
     *   data: {
     *     // ... data to create a Sensor
     *   }
     * })
     * 
    **/
    create<T extends SensorCreateArgs<ExtArgs>>(
      args: SelectSubset<T, SensorCreateArgs<ExtArgs>>
    ): Prisma__SensorClient<$Result.GetResult<Prisma.$SensorPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Sensors.
     *     @param {SensorCreateManyArgs} args - Arguments to create many Sensors.
     *     @example
     *     // Create many Sensors
     *     const sensor = await prisma.sensor.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends SensorCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SensorCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Sensor.
     * @param {SensorDeleteArgs} args - Arguments to delete one Sensor.
     * @example
     * // Delete one Sensor
     * const Sensor = await prisma.sensor.delete({
     *   where: {
     *     // ... filter to delete one Sensor
     *   }
     * })
     * 
    **/
    delete<T extends SensorDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, SensorDeleteArgs<ExtArgs>>
    ): Prisma__SensorClient<$Result.GetResult<Prisma.$SensorPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Sensor.
     * @param {SensorUpdateArgs} args - Arguments to update one Sensor.
     * @example
     * // Update one Sensor
     * const sensor = await prisma.sensor.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends SensorUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, SensorUpdateArgs<ExtArgs>>
    ): Prisma__SensorClient<$Result.GetResult<Prisma.$SensorPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Sensors.
     * @param {SensorDeleteManyArgs} args - Arguments to filter Sensors to delete.
     * @example
     * // Delete a few Sensors
     * const { count } = await prisma.sensor.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends SensorDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SensorDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Sensors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SensorUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Sensors
     * const sensor = await prisma.sensor.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends SensorUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, SensorUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Sensor.
     * @param {SensorUpsertArgs} args - Arguments to update or create a Sensor.
     * @example
     * // Update or create a Sensor
     * const sensor = await prisma.sensor.upsert({
     *   create: {
     *     // ... data to create a Sensor
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Sensor we want to update
     *   }
     * })
    **/
    upsert<T extends SensorUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, SensorUpsertArgs<ExtArgs>>
    ): Prisma__SensorClient<$Result.GetResult<Prisma.$SensorPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Sensors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SensorCountArgs} args - Arguments to filter Sensors to count.
     * @example
     * // Count the number of Sensors
     * const count = await prisma.sensor.count({
     *   where: {
     *     // ... the filter for the Sensors we want to count
     *   }
     * })
    **/
    count<T extends SensorCountArgs>(
      args?: Subset<T, SensorCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SensorCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Sensor.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SensorAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SensorAggregateArgs>(args: Subset<T, SensorAggregateArgs>): Prisma.PrismaPromise<GetSensorAggregateType<T>>

    /**
     * Group by Sensor.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SensorGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SensorGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SensorGroupByArgs['orderBy'] }
        : { orderBy?: SensorGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SensorGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSensorGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Sensor model
   */
  readonly fields: SensorFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Sensor.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SensorClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    CustomerConsumption<T extends Sensor$CustomerConsumptionArgs<ExtArgs> = {}>(args?: Subset<T, Sensor$CustomerConsumptionArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CustomerConsumptionPayload<ExtArgs>, T, 'findMany'> | Null>;

    Power<T extends Sensor$PowerArgs<ExtArgs> = {}>(args?: Subset<T, Sensor$PowerArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PowerPayload<ExtArgs>, T, 'findMany'> | Null>;

    SubStationPower<T extends Sensor$SubStationPowerArgs<ExtArgs> = {}>(args?: Subset<T, Sensor$SubStationPowerArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SubStationPowerPayload<ExtArgs>, T, 'findMany'> | Null>;

    VoltageCurrent<T extends Sensor$VoltageCurrentArgs<ExtArgs> = {}>(args?: Subset<T, Sensor$VoltageCurrentArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VoltageCurrentPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Sensor model
   */ 
  interface SensorFieldRefs {
    readonly id: FieldRef<"Sensor", 'String'>
    readonly type: FieldRef<"Sensor", 'String'>
    readonly feeder: FieldRef<"Sensor", 'String'>
    readonly latitude: FieldRef<"Sensor", 'Float'>
    readonly longitude: FieldRef<"Sensor", 'Float'>
    readonly segment: FieldRef<"Sensor", 'String'>
  }
    

  // Custom InputTypes

  /**
   * Sensor findUnique
   */
  export type SensorFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sensor
     */
    select?: SensorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SensorInclude<ExtArgs> | null
    /**
     * Filter, which Sensor to fetch.
     */
    where: SensorWhereUniqueInput
  }


  /**
   * Sensor findUniqueOrThrow
   */
  export type SensorFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sensor
     */
    select?: SensorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SensorInclude<ExtArgs> | null
    /**
     * Filter, which Sensor to fetch.
     */
    where: SensorWhereUniqueInput
  }


  /**
   * Sensor findFirst
   */
  export type SensorFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sensor
     */
    select?: SensorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SensorInclude<ExtArgs> | null
    /**
     * Filter, which Sensor to fetch.
     */
    where?: SensorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sensors to fetch.
     */
    orderBy?: SensorOrderByWithRelationInput | SensorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sensors.
     */
    cursor?: SensorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sensors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sensors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sensors.
     */
    distinct?: SensorScalarFieldEnum | SensorScalarFieldEnum[]
  }


  /**
   * Sensor findFirstOrThrow
   */
  export type SensorFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sensor
     */
    select?: SensorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SensorInclude<ExtArgs> | null
    /**
     * Filter, which Sensor to fetch.
     */
    where?: SensorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sensors to fetch.
     */
    orderBy?: SensorOrderByWithRelationInput | SensorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sensors.
     */
    cursor?: SensorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sensors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sensors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sensors.
     */
    distinct?: SensorScalarFieldEnum | SensorScalarFieldEnum[]
  }


  /**
   * Sensor findMany
   */
  export type SensorFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sensor
     */
    select?: SensorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SensorInclude<ExtArgs> | null
    /**
     * Filter, which Sensors to fetch.
     */
    where?: SensorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sensors to fetch.
     */
    orderBy?: SensorOrderByWithRelationInput | SensorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Sensors.
     */
    cursor?: SensorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sensors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sensors.
     */
    skip?: number
    distinct?: SensorScalarFieldEnum | SensorScalarFieldEnum[]
  }


  /**
   * Sensor create
   */
  export type SensorCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sensor
     */
    select?: SensorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SensorInclude<ExtArgs> | null
    /**
     * The data needed to create a Sensor.
     */
    data: XOR<SensorCreateInput, SensorUncheckedCreateInput>
  }


  /**
   * Sensor createMany
   */
  export type SensorCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Sensors.
     */
    data: SensorCreateManyInput | SensorCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Sensor update
   */
  export type SensorUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sensor
     */
    select?: SensorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SensorInclude<ExtArgs> | null
    /**
     * The data needed to update a Sensor.
     */
    data: XOR<SensorUpdateInput, SensorUncheckedUpdateInput>
    /**
     * Choose, which Sensor to update.
     */
    where: SensorWhereUniqueInput
  }


  /**
   * Sensor updateMany
   */
  export type SensorUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Sensors.
     */
    data: XOR<SensorUpdateManyMutationInput, SensorUncheckedUpdateManyInput>
    /**
     * Filter which Sensors to update
     */
    where?: SensorWhereInput
  }


  /**
   * Sensor upsert
   */
  export type SensorUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sensor
     */
    select?: SensorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SensorInclude<ExtArgs> | null
    /**
     * The filter to search for the Sensor to update in case it exists.
     */
    where: SensorWhereUniqueInput
    /**
     * In case the Sensor found by the `where` argument doesn't exist, create a new Sensor with this data.
     */
    create: XOR<SensorCreateInput, SensorUncheckedCreateInput>
    /**
     * In case the Sensor was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SensorUpdateInput, SensorUncheckedUpdateInput>
  }


  /**
   * Sensor delete
   */
  export type SensorDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sensor
     */
    select?: SensorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SensorInclude<ExtArgs> | null
    /**
     * Filter which Sensor to delete.
     */
    where: SensorWhereUniqueInput
  }


  /**
   * Sensor deleteMany
   */
  export type SensorDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Sensors to delete
     */
    where?: SensorWhereInput
  }


  /**
   * Sensor.CustomerConsumption
   */
  export type Sensor$CustomerConsumptionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomerConsumption
     */
    select?: CustomerConsumptionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CustomerConsumptionInclude<ExtArgs> | null
    where?: CustomerConsumptionWhereInput
    orderBy?: CustomerConsumptionOrderByWithRelationInput | CustomerConsumptionOrderByWithRelationInput[]
    cursor?: CustomerConsumptionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CustomerConsumptionScalarFieldEnum | CustomerConsumptionScalarFieldEnum[]
  }


  /**
   * Sensor.Power
   */
  export type Sensor$PowerArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Power
     */
    select?: PowerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PowerInclude<ExtArgs> | null
    where?: PowerWhereInput
    orderBy?: PowerOrderByWithRelationInput | PowerOrderByWithRelationInput[]
    cursor?: PowerWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PowerScalarFieldEnum | PowerScalarFieldEnum[]
  }


  /**
   * Sensor.SubStationPower
   */
  export type Sensor$SubStationPowerArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubStationPower
     */
    select?: SubStationPowerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SubStationPowerInclude<ExtArgs> | null
    where?: SubStationPowerWhereInput
    orderBy?: SubStationPowerOrderByWithRelationInput | SubStationPowerOrderByWithRelationInput[]
    cursor?: SubStationPowerWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SubStationPowerScalarFieldEnum | SubStationPowerScalarFieldEnum[]
  }


  /**
   * Sensor.VoltageCurrent
   */
  export type Sensor$VoltageCurrentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VoltageCurrent
     */
    select?: VoltageCurrentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: VoltageCurrentInclude<ExtArgs> | null
    where?: VoltageCurrentWhereInput
    orderBy?: VoltageCurrentOrderByWithRelationInput | VoltageCurrentOrderByWithRelationInput[]
    cursor?: VoltageCurrentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: VoltageCurrentScalarFieldEnum | VoltageCurrentScalarFieldEnum[]
  }


  /**
   * Sensor without action
   */
  export type SensorDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sensor
     */
    select?: SensorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SensorInclude<ExtArgs> | null
  }



  /**
   * Model SubStationPower
   */

  export type AggregateSubStationPower = {
    _count: SubStationPowerCountAggregateOutputType | null
    _avg: SubStationPowerAvgAggregateOutputType | null
    _sum: SubStationPowerSumAggregateOutputType | null
    _min: SubStationPowerMinAggregateOutputType | null
    _max: SubStationPowerMaxAggregateOutputType | null
  }

  export type SubStationPowerAvgAggregateOutputType = {
    Psub: number | null
    Qsub: number | null
  }

  export type SubStationPowerSumAggregateOutputType = {
    Psub: number | null
    Qsub: number | null
  }

  export type SubStationPowerMinAggregateOutputType = {
    timestamp: Date | null
    sensorId: string | null
    Psub: number | null
    Qsub: number | null
  }

  export type SubStationPowerMaxAggregateOutputType = {
    timestamp: Date | null
    sensorId: string | null
    Psub: number | null
    Qsub: number | null
  }

  export type SubStationPowerCountAggregateOutputType = {
    timestamp: number
    sensorId: number
    Psub: number
    Qsub: number
    _all: number
  }


  export type SubStationPowerAvgAggregateInputType = {
    Psub?: true
    Qsub?: true
  }

  export type SubStationPowerSumAggregateInputType = {
    Psub?: true
    Qsub?: true
  }

  export type SubStationPowerMinAggregateInputType = {
    timestamp?: true
    sensorId?: true
    Psub?: true
    Qsub?: true
  }

  export type SubStationPowerMaxAggregateInputType = {
    timestamp?: true
    sensorId?: true
    Psub?: true
    Qsub?: true
  }

  export type SubStationPowerCountAggregateInputType = {
    timestamp?: true
    sensorId?: true
    Psub?: true
    Qsub?: true
    _all?: true
  }

  export type SubStationPowerAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SubStationPower to aggregate.
     */
    where?: SubStationPowerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SubStationPowers to fetch.
     */
    orderBy?: SubStationPowerOrderByWithRelationInput | SubStationPowerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SubStationPowerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SubStationPowers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SubStationPowers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned SubStationPowers
    **/
    _count?: true | SubStationPowerCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SubStationPowerAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SubStationPowerSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SubStationPowerMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SubStationPowerMaxAggregateInputType
  }

  export type GetSubStationPowerAggregateType<T extends SubStationPowerAggregateArgs> = {
        [P in keyof T & keyof AggregateSubStationPower]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSubStationPower[P]>
      : GetScalarType<T[P], AggregateSubStationPower[P]>
  }




  export type SubStationPowerGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SubStationPowerWhereInput
    orderBy?: SubStationPowerOrderByWithAggregationInput | SubStationPowerOrderByWithAggregationInput[]
    by: SubStationPowerScalarFieldEnum[] | SubStationPowerScalarFieldEnum
    having?: SubStationPowerScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SubStationPowerCountAggregateInputType | true
    _avg?: SubStationPowerAvgAggregateInputType
    _sum?: SubStationPowerSumAggregateInputType
    _min?: SubStationPowerMinAggregateInputType
    _max?: SubStationPowerMaxAggregateInputType
  }

  export type SubStationPowerGroupByOutputType = {
    timestamp: Date
    sensorId: string
    Psub: number
    Qsub: number
    _count: SubStationPowerCountAggregateOutputType | null
    _avg: SubStationPowerAvgAggregateOutputType | null
    _sum: SubStationPowerSumAggregateOutputType | null
    _min: SubStationPowerMinAggregateOutputType | null
    _max: SubStationPowerMaxAggregateOutputType | null
  }

  type GetSubStationPowerGroupByPayload<T extends SubStationPowerGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SubStationPowerGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SubStationPowerGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SubStationPowerGroupByOutputType[P]>
            : GetScalarType<T[P], SubStationPowerGroupByOutputType[P]>
        }
      >
    >


  export type SubStationPowerSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    timestamp?: boolean
    sensorId?: boolean
    Psub?: boolean
    Qsub?: boolean
    Sensor?: boolean | SensorDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["subStationPower"]>

  export type SubStationPowerSelectScalar = {
    timestamp?: boolean
    sensorId?: boolean
    Psub?: boolean
    Qsub?: boolean
  }

  export type SubStationPowerInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Sensor?: boolean | SensorDefaultArgs<ExtArgs>
  }


  export type $SubStationPowerPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "SubStationPower"
    objects: {
      Sensor: Prisma.$SensorPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      timestamp: Date
      sensorId: string
      Psub: number
      Qsub: number
    }, ExtArgs["result"]["subStationPower"]>
    composites: {}
  }


  type SubStationPowerGetPayload<S extends boolean | null | undefined | SubStationPowerDefaultArgs> = $Result.GetResult<Prisma.$SubStationPowerPayload, S>

  type SubStationPowerCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<SubStationPowerFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: SubStationPowerCountAggregateInputType | true
    }

  export interface SubStationPowerDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['SubStationPower'], meta: { name: 'SubStationPower' } }
    /**
     * Find zero or one SubStationPower that matches the filter.
     * @param {SubStationPowerFindUniqueArgs} args - Arguments to find a SubStationPower
     * @example
     * // Get one SubStationPower
     * const subStationPower = await prisma.subStationPower.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends SubStationPowerFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, SubStationPowerFindUniqueArgs<ExtArgs>>
    ): Prisma__SubStationPowerClient<$Result.GetResult<Prisma.$SubStationPowerPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one SubStationPower that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {SubStationPowerFindUniqueOrThrowArgs} args - Arguments to find a SubStationPower
     * @example
     * // Get one SubStationPower
     * const subStationPower = await prisma.subStationPower.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends SubStationPowerFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, SubStationPowerFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__SubStationPowerClient<$Result.GetResult<Prisma.$SubStationPowerPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first SubStationPower that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubStationPowerFindFirstArgs} args - Arguments to find a SubStationPower
     * @example
     * // Get one SubStationPower
     * const subStationPower = await prisma.subStationPower.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends SubStationPowerFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, SubStationPowerFindFirstArgs<ExtArgs>>
    ): Prisma__SubStationPowerClient<$Result.GetResult<Prisma.$SubStationPowerPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first SubStationPower that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubStationPowerFindFirstOrThrowArgs} args - Arguments to find a SubStationPower
     * @example
     * // Get one SubStationPower
     * const subStationPower = await prisma.subStationPower.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends SubStationPowerFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, SubStationPowerFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__SubStationPowerClient<$Result.GetResult<Prisma.$SubStationPowerPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more SubStationPowers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubStationPowerFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SubStationPowers
     * const subStationPowers = await prisma.subStationPower.findMany()
     * 
     * // Get first 10 SubStationPowers
     * const subStationPowers = await prisma.subStationPower.findMany({ take: 10 })
     * 
     * // Only select the `timestamp`
     * const subStationPowerWithTimestampOnly = await prisma.subStationPower.findMany({ select: { timestamp: true } })
     * 
    **/
    findMany<T extends SubStationPowerFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SubStationPowerFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SubStationPowerPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a SubStationPower.
     * @param {SubStationPowerCreateArgs} args - Arguments to create a SubStationPower.
     * @example
     * // Create one SubStationPower
     * const SubStationPower = await prisma.subStationPower.create({
     *   data: {
     *     // ... data to create a SubStationPower
     *   }
     * })
     * 
    **/
    create<T extends SubStationPowerCreateArgs<ExtArgs>>(
      args: SelectSubset<T, SubStationPowerCreateArgs<ExtArgs>>
    ): Prisma__SubStationPowerClient<$Result.GetResult<Prisma.$SubStationPowerPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many SubStationPowers.
     *     @param {SubStationPowerCreateManyArgs} args - Arguments to create many SubStationPowers.
     *     @example
     *     // Create many SubStationPowers
     *     const subStationPower = await prisma.subStationPower.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends SubStationPowerCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SubStationPowerCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a SubStationPower.
     * @param {SubStationPowerDeleteArgs} args - Arguments to delete one SubStationPower.
     * @example
     * // Delete one SubStationPower
     * const SubStationPower = await prisma.subStationPower.delete({
     *   where: {
     *     // ... filter to delete one SubStationPower
     *   }
     * })
     * 
    **/
    delete<T extends SubStationPowerDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, SubStationPowerDeleteArgs<ExtArgs>>
    ): Prisma__SubStationPowerClient<$Result.GetResult<Prisma.$SubStationPowerPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one SubStationPower.
     * @param {SubStationPowerUpdateArgs} args - Arguments to update one SubStationPower.
     * @example
     * // Update one SubStationPower
     * const subStationPower = await prisma.subStationPower.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends SubStationPowerUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, SubStationPowerUpdateArgs<ExtArgs>>
    ): Prisma__SubStationPowerClient<$Result.GetResult<Prisma.$SubStationPowerPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more SubStationPowers.
     * @param {SubStationPowerDeleteManyArgs} args - Arguments to filter SubStationPowers to delete.
     * @example
     * // Delete a few SubStationPowers
     * const { count } = await prisma.subStationPower.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends SubStationPowerDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SubStationPowerDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SubStationPowers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubStationPowerUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SubStationPowers
     * const subStationPower = await prisma.subStationPower.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends SubStationPowerUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, SubStationPowerUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one SubStationPower.
     * @param {SubStationPowerUpsertArgs} args - Arguments to update or create a SubStationPower.
     * @example
     * // Update or create a SubStationPower
     * const subStationPower = await prisma.subStationPower.upsert({
     *   create: {
     *     // ... data to create a SubStationPower
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SubStationPower we want to update
     *   }
     * })
    **/
    upsert<T extends SubStationPowerUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, SubStationPowerUpsertArgs<ExtArgs>>
    ): Prisma__SubStationPowerClient<$Result.GetResult<Prisma.$SubStationPowerPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of SubStationPowers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubStationPowerCountArgs} args - Arguments to filter SubStationPowers to count.
     * @example
     * // Count the number of SubStationPowers
     * const count = await prisma.subStationPower.count({
     *   where: {
     *     // ... the filter for the SubStationPowers we want to count
     *   }
     * })
    **/
    count<T extends SubStationPowerCountArgs>(
      args?: Subset<T, SubStationPowerCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SubStationPowerCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SubStationPower.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubStationPowerAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SubStationPowerAggregateArgs>(args: Subset<T, SubStationPowerAggregateArgs>): Prisma.PrismaPromise<GetSubStationPowerAggregateType<T>>

    /**
     * Group by SubStationPower.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubStationPowerGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SubStationPowerGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SubStationPowerGroupByArgs['orderBy'] }
        : { orderBy?: SubStationPowerGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SubStationPowerGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSubStationPowerGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the SubStationPower model
   */
  readonly fields: SubStationPowerFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for SubStationPower.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SubStationPowerClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    Sensor<T extends SensorDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SensorDefaultArgs<ExtArgs>>): Prisma__SensorClient<$Result.GetResult<Prisma.$SensorPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the SubStationPower model
   */ 
  interface SubStationPowerFieldRefs {
    readonly timestamp: FieldRef<"SubStationPower", 'DateTime'>
    readonly sensorId: FieldRef<"SubStationPower", 'String'>
    readonly Psub: FieldRef<"SubStationPower", 'Float'>
    readonly Qsub: FieldRef<"SubStationPower", 'Float'>
  }
    

  // Custom InputTypes

  /**
   * SubStationPower findUnique
   */
  export type SubStationPowerFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubStationPower
     */
    select?: SubStationPowerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SubStationPowerInclude<ExtArgs> | null
    /**
     * Filter, which SubStationPower to fetch.
     */
    where: SubStationPowerWhereUniqueInput
  }


  /**
   * SubStationPower findUniqueOrThrow
   */
  export type SubStationPowerFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubStationPower
     */
    select?: SubStationPowerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SubStationPowerInclude<ExtArgs> | null
    /**
     * Filter, which SubStationPower to fetch.
     */
    where: SubStationPowerWhereUniqueInput
  }


  /**
   * SubStationPower findFirst
   */
  export type SubStationPowerFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubStationPower
     */
    select?: SubStationPowerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SubStationPowerInclude<ExtArgs> | null
    /**
     * Filter, which SubStationPower to fetch.
     */
    where?: SubStationPowerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SubStationPowers to fetch.
     */
    orderBy?: SubStationPowerOrderByWithRelationInput | SubStationPowerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SubStationPowers.
     */
    cursor?: SubStationPowerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SubStationPowers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SubStationPowers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SubStationPowers.
     */
    distinct?: SubStationPowerScalarFieldEnum | SubStationPowerScalarFieldEnum[]
  }


  /**
   * SubStationPower findFirstOrThrow
   */
  export type SubStationPowerFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubStationPower
     */
    select?: SubStationPowerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SubStationPowerInclude<ExtArgs> | null
    /**
     * Filter, which SubStationPower to fetch.
     */
    where?: SubStationPowerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SubStationPowers to fetch.
     */
    orderBy?: SubStationPowerOrderByWithRelationInput | SubStationPowerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SubStationPowers.
     */
    cursor?: SubStationPowerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SubStationPowers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SubStationPowers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SubStationPowers.
     */
    distinct?: SubStationPowerScalarFieldEnum | SubStationPowerScalarFieldEnum[]
  }


  /**
   * SubStationPower findMany
   */
  export type SubStationPowerFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubStationPower
     */
    select?: SubStationPowerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SubStationPowerInclude<ExtArgs> | null
    /**
     * Filter, which SubStationPowers to fetch.
     */
    where?: SubStationPowerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SubStationPowers to fetch.
     */
    orderBy?: SubStationPowerOrderByWithRelationInput | SubStationPowerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing SubStationPowers.
     */
    cursor?: SubStationPowerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SubStationPowers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SubStationPowers.
     */
    skip?: number
    distinct?: SubStationPowerScalarFieldEnum | SubStationPowerScalarFieldEnum[]
  }


  /**
   * SubStationPower create
   */
  export type SubStationPowerCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubStationPower
     */
    select?: SubStationPowerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SubStationPowerInclude<ExtArgs> | null
    /**
     * The data needed to create a SubStationPower.
     */
    data: XOR<SubStationPowerCreateInput, SubStationPowerUncheckedCreateInput>
  }


  /**
   * SubStationPower createMany
   */
  export type SubStationPowerCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many SubStationPowers.
     */
    data: SubStationPowerCreateManyInput | SubStationPowerCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * SubStationPower update
   */
  export type SubStationPowerUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubStationPower
     */
    select?: SubStationPowerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SubStationPowerInclude<ExtArgs> | null
    /**
     * The data needed to update a SubStationPower.
     */
    data: XOR<SubStationPowerUpdateInput, SubStationPowerUncheckedUpdateInput>
    /**
     * Choose, which SubStationPower to update.
     */
    where: SubStationPowerWhereUniqueInput
  }


  /**
   * SubStationPower updateMany
   */
  export type SubStationPowerUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update SubStationPowers.
     */
    data: XOR<SubStationPowerUpdateManyMutationInput, SubStationPowerUncheckedUpdateManyInput>
    /**
     * Filter which SubStationPowers to update
     */
    where?: SubStationPowerWhereInput
  }


  /**
   * SubStationPower upsert
   */
  export type SubStationPowerUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubStationPower
     */
    select?: SubStationPowerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SubStationPowerInclude<ExtArgs> | null
    /**
     * The filter to search for the SubStationPower to update in case it exists.
     */
    where: SubStationPowerWhereUniqueInput
    /**
     * In case the SubStationPower found by the `where` argument doesn't exist, create a new SubStationPower with this data.
     */
    create: XOR<SubStationPowerCreateInput, SubStationPowerUncheckedCreateInput>
    /**
     * In case the SubStationPower was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SubStationPowerUpdateInput, SubStationPowerUncheckedUpdateInput>
  }


  /**
   * SubStationPower delete
   */
  export type SubStationPowerDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubStationPower
     */
    select?: SubStationPowerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SubStationPowerInclude<ExtArgs> | null
    /**
     * Filter which SubStationPower to delete.
     */
    where: SubStationPowerWhereUniqueInput
  }


  /**
   * SubStationPower deleteMany
   */
  export type SubStationPowerDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SubStationPowers to delete
     */
    where?: SubStationPowerWhereInput
  }


  /**
   * SubStationPower without action
   */
  export type SubStationPowerDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubStationPower
     */
    select?: SubStationPowerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SubStationPowerInclude<ExtArgs> | null
  }



  /**
   * Model VoltageCurrent
   */

  export type AggregateVoltageCurrent = {
    _count: VoltageCurrentCountAggregateOutputType | null
    _avg: VoltageCurrentAvgAggregateOutputType | null
    _sum: VoltageCurrentSumAggregateOutputType | null
    _min: VoltageCurrentMinAggregateOutputType | null
    _max: VoltageCurrentMaxAggregateOutputType | null
  }

  export type VoltageCurrentAvgAggregateOutputType = {
    Va: number | null
    Vb: number | null
    Vc: number | null
    Ia: number | null
    Ib: number | null
    Ic: number | null
    faultType: number | null
  }

  export type VoltageCurrentSumAggregateOutputType = {
    Va: number | null
    Vb: number | null
    Vc: number | null
    Ia: number | null
    Ib: number | null
    Ic: number | null
    faultType: number | null
  }

  export type VoltageCurrentMinAggregateOutputType = {
    timestamp: Date | null
    sensorId: string | null
    Va: number | null
    Vb: number | null
    Vc: number | null
    Ia: number | null
    Ib: number | null
    Ic: number | null
    faultType: number | null
  }

  export type VoltageCurrentMaxAggregateOutputType = {
    timestamp: Date | null
    sensorId: string | null
    Va: number | null
    Vb: number | null
    Vc: number | null
    Ia: number | null
    Ib: number | null
    Ic: number | null
    faultType: number | null
  }

  export type VoltageCurrentCountAggregateOutputType = {
    timestamp: number
    sensorId: number
    Va: number
    Vb: number
    Vc: number
    Ia: number
    Ib: number
    Ic: number
    faultType: number
    _all: number
  }


  export type VoltageCurrentAvgAggregateInputType = {
    Va?: true
    Vb?: true
    Vc?: true
    Ia?: true
    Ib?: true
    Ic?: true
    faultType?: true
  }

  export type VoltageCurrentSumAggregateInputType = {
    Va?: true
    Vb?: true
    Vc?: true
    Ia?: true
    Ib?: true
    Ic?: true
    faultType?: true
  }

  export type VoltageCurrentMinAggregateInputType = {
    timestamp?: true
    sensorId?: true
    Va?: true
    Vb?: true
    Vc?: true
    Ia?: true
    Ib?: true
    Ic?: true
    faultType?: true
  }

  export type VoltageCurrentMaxAggregateInputType = {
    timestamp?: true
    sensorId?: true
    Va?: true
    Vb?: true
    Vc?: true
    Ia?: true
    Ib?: true
    Ic?: true
    faultType?: true
  }

  export type VoltageCurrentCountAggregateInputType = {
    timestamp?: true
    sensorId?: true
    Va?: true
    Vb?: true
    Vc?: true
    Ia?: true
    Ib?: true
    Ic?: true
    faultType?: true
    _all?: true
  }

  export type VoltageCurrentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which VoltageCurrent to aggregate.
     */
    where?: VoltageCurrentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VoltageCurrents to fetch.
     */
    orderBy?: VoltageCurrentOrderByWithRelationInput | VoltageCurrentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: VoltageCurrentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VoltageCurrents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VoltageCurrents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned VoltageCurrents
    **/
    _count?: true | VoltageCurrentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: VoltageCurrentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: VoltageCurrentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: VoltageCurrentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: VoltageCurrentMaxAggregateInputType
  }

  export type GetVoltageCurrentAggregateType<T extends VoltageCurrentAggregateArgs> = {
        [P in keyof T & keyof AggregateVoltageCurrent]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateVoltageCurrent[P]>
      : GetScalarType<T[P], AggregateVoltageCurrent[P]>
  }




  export type VoltageCurrentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: VoltageCurrentWhereInput
    orderBy?: VoltageCurrentOrderByWithAggregationInput | VoltageCurrentOrderByWithAggregationInput[]
    by: VoltageCurrentScalarFieldEnum[] | VoltageCurrentScalarFieldEnum
    having?: VoltageCurrentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: VoltageCurrentCountAggregateInputType | true
    _avg?: VoltageCurrentAvgAggregateInputType
    _sum?: VoltageCurrentSumAggregateInputType
    _min?: VoltageCurrentMinAggregateInputType
    _max?: VoltageCurrentMaxAggregateInputType
  }

  export type VoltageCurrentGroupByOutputType = {
    timestamp: Date
    sensorId: string
    Va: number
    Vb: number
    Vc: number
    Ia: number
    Ib: number
    Ic: number
    faultType: number | null
    _count: VoltageCurrentCountAggregateOutputType | null
    _avg: VoltageCurrentAvgAggregateOutputType | null
    _sum: VoltageCurrentSumAggregateOutputType | null
    _min: VoltageCurrentMinAggregateOutputType | null
    _max: VoltageCurrentMaxAggregateOutputType | null
  }

  type GetVoltageCurrentGroupByPayload<T extends VoltageCurrentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<VoltageCurrentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof VoltageCurrentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], VoltageCurrentGroupByOutputType[P]>
            : GetScalarType<T[P], VoltageCurrentGroupByOutputType[P]>
        }
      >
    >


  export type VoltageCurrentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    timestamp?: boolean
    sensorId?: boolean
    Va?: boolean
    Vb?: boolean
    Vc?: boolean
    Ia?: boolean
    Ib?: boolean
    Ic?: boolean
    faultType?: boolean
    Sensor?: boolean | SensorDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["voltageCurrent"]>

  export type VoltageCurrentSelectScalar = {
    timestamp?: boolean
    sensorId?: boolean
    Va?: boolean
    Vb?: boolean
    Vc?: boolean
    Ia?: boolean
    Ib?: boolean
    Ic?: boolean
    faultType?: boolean
  }

  export type VoltageCurrentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Sensor?: boolean | SensorDefaultArgs<ExtArgs>
  }


  export type $VoltageCurrentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "VoltageCurrent"
    objects: {
      Sensor: Prisma.$SensorPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      timestamp: Date
      sensorId: string
      Va: number
      Vb: number
      Vc: number
      Ia: number
      Ib: number
      Ic: number
      faultType: number | null
    }, ExtArgs["result"]["voltageCurrent"]>
    composites: {}
  }


  type VoltageCurrentGetPayload<S extends boolean | null | undefined | VoltageCurrentDefaultArgs> = $Result.GetResult<Prisma.$VoltageCurrentPayload, S>

  type VoltageCurrentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<VoltageCurrentFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: VoltageCurrentCountAggregateInputType | true
    }

  export interface VoltageCurrentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['VoltageCurrent'], meta: { name: 'VoltageCurrent' } }
    /**
     * Find zero or one VoltageCurrent that matches the filter.
     * @param {VoltageCurrentFindUniqueArgs} args - Arguments to find a VoltageCurrent
     * @example
     * // Get one VoltageCurrent
     * const voltageCurrent = await prisma.voltageCurrent.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends VoltageCurrentFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, VoltageCurrentFindUniqueArgs<ExtArgs>>
    ): Prisma__VoltageCurrentClient<$Result.GetResult<Prisma.$VoltageCurrentPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one VoltageCurrent that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {VoltageCurrentFindUniqueOrThrowArgs} args - Arguments to find a VoltageCurrent
     * @example
     * // Get one VoltageCurrent
     * const voltageCurrent = await prisma.voltageCurrent.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends VoltageCurrentFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, VoltageCurrentFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__VoltageCurrentClient<$Result.GetResult<Prisma.$VoltageCurrentPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first VoltageCurrent that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VoltageCurrentFindFirstArgs} args - Arguments to find a VoltageCurrent
     * @example
     * // Get one VoltageCurrent
     * const voltageCurrent = await prisma.voltageCurrent.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends VoltageCurrentFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, VoltageCurrentFindFirstArgs<ExtArgs>>
    ): Prisma__VoltageCurrentClient<$Result.GetResult<Prisma.$VoltageCurrentPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first VoltageCurrent that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VoltageCurrentFindFirstOrThrowArgs} args - Arguments to find a VoltageCurrent
     * @example
     * // Get one VoltageCurrent
     * const voltageCurrent = await prisma.voltageCurrent.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends VoltageCurrentFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, VoltageCurrentFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__VoltageCurrentClient<$Result.GetResult<Prisma.$VoltageCurrentPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more VoltageCurrents that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VoltageCurrentFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all VoltageCurrents
     * const voltageCurrents = await prisma.voltageCurrent.findMany()
     * 
     * // Get first 10 VoltageCurrents
     * const voltageCurrents = await prisma.voltageCurrent.findMany({ take: 10 })
     * 
     * // Only select the `timestamp`
     * const voltageCurrentWithTimestampOnly = await prisma.voltageCurrent.findMany({ select: { timestamp: true } })
     * 
    **/
    findMany<T extends VoltageCurrentFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, VoltageCurrentFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VoltageCurrentPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a VoltageCurrent.
     * @param {VoltageCurrentCreateArgs} args - Arguments to create a VoltageCurrent.
     * @example
     * // Create one VoltageCurrent
     * const VoltageCurrent = await prisma.voltageCurrent.create({
     *   data: {
     *     // ... data to create a VoltageCurrent
     *   }
     * })
     * 
    **/
    create<T extends VoltageCurrentCreateArgs<ExtArgs>>(
      args: SelectSubset<T, VoltageCurrentCreateArgs<ExtArgs>>
    ): Prisma__VoltageCurrentClient<$Result.GetResult<Prisma.$VoltageCurrentPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many VoltageCurrents.
     *     @param {VoltageCurrentCreateManyArgs} args - Arguments to create many VoltageCurrents.
     *     @example
     *     // Create many VoltageCurrents
     *     const voltageCurrent = await prisma.voltageCurrent.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends VoltageCurrentCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, VoltageCurrentCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a VoltageCurrent.
     * @param {VoltageCurrentDeleteArgs} args - Arguments to delete one VoltageCurrent.
     * @example
     * // Delete one VoltageCurrent
     * const VoltageCurrent = await prisma.voltageCurrent.delete({
     *   where: {
     *     // ... filter to delete one VoltageCurrent
     *   }
     * })
     * 
    **/
    delete<T extends VoltageCurrentDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, VoltageCurrentDeleteArgs<ExtArgs>>
    ): Prisma__VoltageCurrentClient<$Result.GetResult<Prisma.$VoltageCurrentPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one VoltageCurrent.
     * @param {VoltageCurrentUpdateArgs} args - Arguments to update one VoltageCurrent.
     * @example
     * // Update one VoltageCurrent
     * const voltageCurrent = await prisma.voltageCurrent.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends VoltageCurrentUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, VoltageCurrentUpdateArgs<ExtArgs>>
    ): Prisma__VoltageCurrentClient<$Result.GetResult<Prisma.$VoltageCurrentPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more VoltageCurrents.
     * @param {VoltageCurrentDeleteManyArgs} args - Arguments to filter VoltageCurrents to delete.
     * @example
     * // Delete a few VoltageCurrents
     * const { count } = await prisma.voltageCurrent.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends VoltageCurrentDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, VoltageCurrentDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more VoltageCurrents.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VoltageCurrentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many VoltageCurrents
     * const voltageCurrent = await prisma.voltageCurrent.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends VoltageCurrentUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, VoltageCurrentUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one VoltageCurrent.
     * @param {VoltageCurrentUpsertArgs} args - Arguments to update or create a VoltageCurrent.
     * @example
     * // Update or create a VoltageCurrent
     * const voltageCurrent = await prisma.voltageCurrent.upsert({
     *   create: {
     *     // ... data to create a VoltageCurrent
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the VoltageCurrent we want to update
     *   }
     * })
    **/
    upsert<T extends VoltageCurrentUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, VoltageCurrentUpsertArgs<ExtArgs>>
    ): Prisma__VoltageCurrentClient<$Result.GetResult<Prisma.$VoltageCurrentPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of VoltageCurrents.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VoltageCurrentCountArgs} args - Arguments to filter VoltageCurrents to count.
     * @example
     * // Count the number of VoltageCurrents
     * const count = await prisma.voltageCurrent.count({
     *   where: {
     *     // ... the filter for the VoltageCurrents we want to count
     *   }
     * })
    **/
    count<T extends VoltageCurrentCountArgs>(
      args?: Subset<T, VoltageCurrentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], VoltageCurrentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a VoltageCurrent.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VoltageCurrentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends VoltageCurrentAggregateArgs>(args: Subset<T, VoltageCurrentAggregateArgs>): Prisma.PrismaPromise<GetVoltageCurrentAggregateType<T>>

    /**
     * Group by VoltageCurrent.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VoltageCurrentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends VoltageCurrentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: VoltageCurrentGroupByArgs['orderBy'] }
        : { orderBy?: VoltageCurrentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, VoltageCurrentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetVoltageCurrentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the VoltageCurrent model
   */
  readonly fields: VoltageCurrentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for VoltageCurrent.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__VoltageCurrentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    Sensor<T extends SensorDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SensorDefaultArgs<ExtArgs>>): Prisma__SensorClient<$Result.GetResult<Prisma.$SensorPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the VoltageCurrent model
   */ 
  interface VoltageCurrentFieldRefs {
    readonly timestamp: FieldRef<"VoltageCurrent", 'DateTime'>
    readonly sensorId: FieldRef<"VoltageCurrent", 'String'>
    readonly Va: FieldRef<"VoltageCurrent", 'Float'>
    readonly Vb: FieldRef<"VoltageCurrent", 'Float'>
    readonly Vc: FieldRef<"VoltageCurrent", 'Float'>
    readonly Ia: FieldRef<"VoltageCurrent", 'Float'>
    readonly Ib: FieldRef<"VoltageCurrent", 'Float'>
    readonly Ic: FieldRef<"VoltageCurrent", 'Float'>
    readonly faultType: FieldRef<"VoltageCurrent", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * VoltageCurrent findUnique
   */
  export type VoltageCurrentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VoltageCurrent
     */
    select?: VoltageCurrentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: VoltageCurrentInclude<ExtArgs> | null
    /**
     * Filter, which VoltageCurrent to fetch.
     */
    where: VoltageCurrentWhereUniqueInput
  }


  /**
   * VoltageCurrent findUniqueOrThrow
   */
  export type VoltageCurrentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VoltageCurrent
     */
    select?: VoltageCurrentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: VoltageCurrentInclude<ExtArgs> | null
    /**
     * Filter, which VoltageCurrent to fetch.
     */
    where: VoltageCurrentWhereUniqueInput
  }


  /**
   * VoltageCurrent findFirst
   */
  export type VoltageCurrentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VoltageCurrent
     */
    select?: VoltageCurrentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: VoltageCurrentInclude<ExtArgs> | null
    /**
     * Filter, which VoltageCurrent to fetch.
     */
    where?: VoltageCurrentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VoltageCurrents to fetch.
     */
    orderBy?: VoltageCurrentOrderByWithRelationInput | VoltageCurrentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for VoltageCurrents.
     */
    cursor?: VoltageCurrentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VoltageCurrents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VoltageCurrents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of VoltageCurrents.
     */
    distinct?: VoltageCurrentScalarFieldEnum | VoltageCurrentScalarFieldEnum[]
  }


  /**
   * VoltageCurrent findFirstOrThrow
   */
  export type VoltageCurrentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VoltageCurrent
     */
    select?: VoltageCurrentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: VoltageCurrentInclude<ExtArgs> | null
    /**
     * Filter, which VoltageCurrent to fetch.
     */
    where?: VoltageCurrentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VoltageCurrents to fetch.
     */
    orderBy?: VoltageCurrentOrderByWithRelationInput | VoltageCurrentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for VoltageCurrents.
     */
    cursor?: VoltageCurrentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VoltageCurrents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VoltageCurrents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of VoltageCurrents.
     */
    distinct?: VoltageCurrentScalarFieldEnum | VoltageCurrentScalarFieldEnum[]
  }


  /**
   * VoltageCurrent findMany
   */
  export type VoltageCurrentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VoltageCurrent
     */
    select?: VoltageCurrentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: VoltageCurrentInclude<ExtArgs> | null
    /**
     * Filter, which VoltageCurrents to fetch.
     */
    where?: VoltageCurrentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VoltageCurrents to fetch.
     */
    orderBy?: VoltageCurrentOrderByWithRelationInput | VoltageCurrentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing VoltageCurrents.
     */
    cursor?: VoltageCurrentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VoltageCurrents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VoltageCurrents.
     */
    skip?: number
    distinct?: VoltageCurrentScalarFieldEnum | VoltageCurrentScalarFieldEnum[]
  }


  /**
   * VoltageCurrent create
   */
  export type VoltageCurrentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VoltageCurrent
     */
    select?: VoltageCurrentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: VoltageCurrentInclude<ExtArgs> | null
    /**
     * The data needed to create a VoltageCurrent.
     */
    data: XOR<VoltageCurrentCreateInput, VoltageCurrentUncheckedCreateInput>
  }


  /**
   * VoltageCurrent createMany
   */
  export type VoltageCurrentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many VoltageCurrents.
     */
    data: VoltageCurrentCreateManyInput | VoltageCurrentCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * VoltageCurrent update
   */
  export type VoltageCurrentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VoltageCurrent
     */
    select?: VoltageCurrentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: VoltageCurrentInclude<ExtArgs> | null
    /**
     * The data needed to update a VoltageCurrent.
     */
    data: XOR<VoltageCurrentUpdateInput, VoltageCurrentUncheckedUpdateInput>
    /**
     * Choose, which VoltageCurrent to update.
     */
    where: VoltageCurrentWhereUniqueInput
  }


  /**
   * VoltageCurrent updateMany
   */
  export type VoltageCurrentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update VoltageCurrents.
     */
    data: XOR<VoltageCurrentUpdateManyMutationInput, VoltageCurrentUncheckedUpdateManyInput>
    /**
     * Filter which VoltageCurrents to update
     */
    where?: VoltageCurrentWhereInput
  }


  /**
   * VoltageCurrent upsert
   */
  export type VoltageCurrentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VoltageCurrent
     */
    select?: VoltageCurrentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: VoltageCurrentInclude<ExtArgs> | null
    /**
     * The filter to search for the VoltageCurrent to update in case it exists.
     */
    where: VoltageCurrentWhereUniqueInput
    /**
     * In case the VoltageCurrent found by the `where` argument doesn't exist, create a new VoltageCurrent with this data.
     */
    create: XOR<VoltageCurrentCreateInput, VoltageCurrentUncheckedCreateInput>
    /**
     * In case the VoltageCurrent was found with the provided `where` argument, update it with this data.
     */
    update: XOR<VoltageCurrentUpdateInput, VoltageCurrentUncheckedUpdateInput>
  }


  /**
   * VoltageCurrent delete
   */
  export type VoltageCurrentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VoltageCurrent
     */
    select?: VoltageCurrentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: VoltageCurrentInclude<ExtArgs> | null
    /**
     * Filter which VoltageCurrent to delete.
     */
    where: VoltageCurrentWhereUniqueInput
  }


  /**
   * VoltageCurrent deleteMany
   */
  export type VoltageCurrentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which VoltageCurrents to delete
     */
    where?: VoltageCurrentWhereInput
  }


  /**
   * VoltageCurrent without action
   */
  export type VoltageCurrentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VoltageCurrent
     */
    select?: VoltageCurrentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: VoltageCurrentInclude<ExtArgs> | null
  }



  /**
   * Model sensor
   */

  export type AggregateSensor = {
    _count: SensorCountAggregateOutputType | null
    _avg: SensorAvgAggregateOutputType | null
    _sum: SensorSumAggregateOutputType | null
    _min: SensorMinAggregateOutputType | null
    _max: SensorMaxAggregateOutputType | null
  }

  export type SensorAvgAggregateOutputType = {
    latitude: number | null
    longitude: number | null
  }

  export type SensorSumAggregateOutputType = {
    latitude: number | null
    longitude: number | null
  }

  export type SensorMinAggregateOutputType = {
    id: string | null
    type: string | null
    feeder: string | null
    latitude: number | null
    longitude: number | null
    segment: string | null
  }

  export type SensorMaxAggregateOutputType = {
    id: string | null
    type: string | null
    feeder: string | null
    latitude: number | null
    longitude: number | null
    segment: string | null
  }

  export type SensorCountAggregateOutputType = {
    id: number
    type: number
    feeder: number
    latitude: number
    longitude: number
    segment: number
    _all: number
  }


  export type SensorAvgAggregateInputType = {
    latitude?: true
    longitude?: true
  }

  export type SensorSumAggregateInputType = {
    latitude?: true
    longitude?: true
  }

  export type SensorMinAggregateInputType = {
    id?: true
    type?: true
    feeder?: true
    latitude?: true
    longitude?: true
    segment?: true
  }

  export type SensorMaxAggregateInputType = {
    id?: true
    type?: true
    feeder?: true
    latitude?: true
    longitude?: true
    segment?: true
  }

  export type SensorCountAggregateInputType = {
    id?: true
    type?: true
    feeder?: true
    latitude?: true
    longitude?: true
    segment?: true
    _all?: true
  }

  export type SensorAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which sensor to aggregate.
     */
    where?: sensorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of sensors to fetch.
     */
    orderBy?: sensorOrderByWithRelationInput | sensorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: sensorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` sensors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` sensors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned sensors
    **/
    _count?: true | SensorCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SensorAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SensorSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SensorMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SensorMaxAggregateInputType
  }

  export type GetSensorAggregateType<T extends SensorAggregateArgs> = {
        [P in keyof T & keyof AggregateSensor]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSensor[P]>
      : GetScalarType<T[P], AggregateSensor[P]>
  }




  export type sensorGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: sensorWhereInput
    orderBy?: sensorOrderByWithAggregationInput | sensorOrderByWithAggregationInput[]
    by: SensorScalarFieldEnum[] | SensorScalarFieldEnum
    having?: sensorScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SensorCountAggregateInputType | true
    _avg?: SensorAvgAggregateInputType
    _sum?: SensorSumAggregateInputType
    _min?: SensorMinAggregateInputType
    _max?: SensorMaxAggregateInputType
  }

  export type SensorGroupByOutputType = {
    id: string
    type: string
    feeder: string
    latitude: number | null
    longitude: number | null
    segment: string | null
    _count: SensorCountAggregateOutputType | null
    _avg: SensorAvgAggregateOutputType | null
    _sum: SensorSumAggregateOutputType | null
    _min: SensorMinAggregateOutputType | null
    _max: SensorMaxAggregateOutputType | null
  }

  type GetSensorGroupByPayload<T extends sensorGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SensorGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SensorGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SensorGroupByOutputType[P]>
            : GetScalarType<T[P], SensorGroupByOutputType[P]>
        }
      >
    >


  export type sensorSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    type?: boolean
    feeder?: boolean
    segment?: boolean
    latitude?: boolean
    longitude?: boolean
  }, ExtArgs["result"]["sensor"]>

  export type sensorSelectScalar = {
    id?: boolean
    type?: boolean
    feeder?: boolean
    segment?: boolean
    latitude?: boolean
    longitude?: boolean
  }


  export type $sensorPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "sensor"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      type: string
      feeder: string
      segment: string | null
      latitude: number | null
      longitude: number | null
    }, ExtArgs["result"]["sensor"]>
    composites: {}
  }


  type sensorGetPayload<S extends boolean | null | undefined | sensorDefaultArgs> = $Result.GetResult<Prisma.$sensorPayload, S>

  type sensorCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<sensorFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: SensorCountAggregateInputType | true
    }

  export interface sensorDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['sensor'], meta: { name: 'sensor' } }
    /**
     * Find zero or one Sensor that matches the filter.
     * @param {sensorFindUniqueArgs} args - Arguments to find a Sensor
     * @example
     * // Get one Sensor
     * const sensor = await prisma.sensor.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends sensorFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, sensorFindUniqueArgs<ExtArgs>>
    ): Prisma__sensorClient<$Result.GetResult<Prisma.$sensorPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Sensor that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {sensorFindUniqueOrThrowArgs} args - Arguments to find a Sensor
     * @example
     * // Get one Sensor
     * const sensor = await prisma.sensor.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends sensorFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, sensorFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__sensorClient<$Result.GetResult<Prisma.$sensorPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Sensor that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {sensorFindFirstArgs} args - Arguments to find a Sensor
     * @example
     * // Get one Sensor
     * const sensor = await prisma.sensor.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends sensorFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, sensorFindFirstArgs<ExtArgs>>
    ): Prisma__sensorClient<$Result.GetResult<Prisma.$sensorPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Sensor that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {sensorFindFirstOrThrowArgs} args - Arguments to find a Sensor
     * @example
     * // Get one Sensor
     * const sensor = await prisma.sensor.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends sensorFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, sensorFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__sensorClient<$Result.GetResult<Prisma.$sensorPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Sensors that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {sensorFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Sensors
     * const sensors = await prisma.sensor.findMany()
     * 
     * // Get first 10 Sensors
     * const sensors = await prisma.sensor.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const sensorWithIdOnly = await prisma.sensor.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends sensorFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, sensorFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$sensorPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Sensor.
     * @param {sensorCreateArgs} args - Arguments to create a Sensor.
     * @example
     * // Create one Sensor
     * const Sensor = await prisma.sensor.create({
     *   data: {
     *     // ... data to create a Sensor
     *   }
     * })
     * 
    **/
    create<T extends sensorCreateArgs<ExtArgs>>(
      args: SelectSubset<T, sensorCreateArgs<ExtArgs>>
    ): Prisma__sensorClient<$Result.GetResult<Prisma.$sensorPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Sensors.
     *     @param {sensorCreateManyArgs} args - Arguments to create many Sensors.
     *     @example
     *     // Create many Sensors
     *     const sensor = await prisma.sensor.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends sensorCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, sensorCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Sensor.
     * @param {sensorDeleteArgs} args - Arguments to delete one Sensor.
     * @example
     * // Delete one Sensor
     * const Sensor = await prisma.sensor.delete({
     *   where: {
     *     // ... filter to delete one Sensor
     *   }
     * })
     * 
    **/
    delete<T extends sensorDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, sensorDeleteArgs<ExtArgs>>
    ): Prisma__sensorClient<$Result.GetResult<Prisma.$sensorPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Sensor.
     * @param {sensorUpdateArgs} args - Arguments to update one Sensor.
     * @example
     * // Update one Sensor
     * const sensor = await prisma.sensor.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends sensorUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, sensorUpdateArgs<ExtArgs>>
    ): Prisma__sensorClient<$Result.GetResult<Prisma.$sensorPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Sensors.
     * @param {sensorDeleteManyArgs} args - Arguments to filter Sensors to delete.
     * @example
     * // Delete a few Sensors
     * const { count } = await prisma.sensor.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends sensorDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, sensorDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Sensors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {sensorUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Sensors
     * const sensor = await prisma.sensor.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends sensorUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, sensorUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Sensor.
     * @param {sensorUpsertArgs} args - Arguments to update or create a Sensor.
     * @example
     * // Update or create a Sensor
     * const sensor = await prisma.sensor.upsert({
     *   create: {
     *     // ... data to create a Sensor
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Sensor we want to update
     *   }
     * })
    **/
    upsert<T extends sensorUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, sensorUpsertArgs<ExtArgs>>
    ): Prisma__sensorClient<$Result.GetResult<Prisma.$sensorPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Sensors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {sensorCountArgs} args - Arguments to filter Sensors to count.
     * @example
     * // Count the number of Sensors
     * const count = await prisma.sensor.count({
     *   where: {
     *     // ... the filter for the Sensors we want to count
     *   }
     * })
    **/
    count<T extends sensorCountArgs>(
      args?: Subset<T, sensorCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SensorCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Sensor.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SensorAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SensorAggregateArgs>(args: Subset<T, SensorAggregateArgs>): Prisma.PrismaPromise<GetSensorAggregateType<T>>

    /**
     * Group by Sensor.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {sensorGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends sensorGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: sensorGroupByArgs['orderBy'] }
        : { orderBy?: sensorGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, sensorGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSensorGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the sensor model
   */
  readonly fields: sensorFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for sensor.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__sensorClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';


    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the sensor model
   */ 
  interface sensorFieldRefs {
    readonly id: FieldRef<"sensor", 'String'>
    readonly type: FieldRef<"sensor", 'String'>
    readonly feeder: FieldRef<"sensor", 'String'>
    readonly segment: FieldRef<"sensor", 'String'>
    readonly latitude: FieldRef<"sensor", 'Float'>
    readonly longitude: FieldRef<"sensor", 'Float'>
  }
    

  // Custom InputTypes

  /**
   * sensor findUnique
   */
  export type sensorFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the sensor
     */
    select?: sensorSelect<ExtArgs> | null
    /**
     * Filter, which sensor to fetch.
     */
    where: sensorWhereUniqueInput
  }


  /**
   * sensor findUniqueOrThrow
   */
  export type sensorFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the sensor
     */
    select?: sensorSelect<ExtArgs> | null
    /**
     * Filter, which sensor to fetch.
     */
    where: sensorWhereUniqueInput
  }


  /**
   * sensor findFirst
   */
  export type sensorFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the sensor
     */
    select?: sensorSelect<ExtArgs> | null
    /**
     * Filter, which sensor to fetch.
     */
    where?: sensorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of sensors to fetch.
     */
    orderBy?: sensorOrderByWithRelationInput | sensorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for sensors.
     */
    cursor?: sensorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` sensors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` sensors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of sensors.
     */
    distinct?: SensorScalarFieldEnum | SensorScalarFieldEnum[]
  }


  /**
   * sensor findFirstOrThrow
   */
  export type sensorFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the sensor
     */
    select?: sensorSelect<ExtArgs> | null
    /**
     * Filter, which sensor to fetch.
     */
    where?: sensorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of sensors to fetch.
     */
    orderBy?: sensorOrderByWithRelationInput | sensorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for sensors.
     */
    cursor?: sensorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` sensors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` sensors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of sensors.
     */
    distinct?: SensorScalarFieldEnum | SensorScalarFieldEnum[]
  }


  /**
   * sensor findMany
   */
  export type sensorFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the sensor
     */
    select?: sensorSelect<ExtArgs> | null
    /**
     * Filter, which sensors to fetch.
     */
    where?: sensorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of sensors to fetch.
     */
    orderBy?: sensorOrderByWithRelationInput | sensorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing sensors.
     */
    cursor?: sensorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` sensors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` sensors.
     */
    skip?: number
    distinct?: SensorScalarFieldEnum | SensorScalarFieldEnum[]
  }


  /**
   * sensor create
   */
  export type sensorCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the sensor
     */
    select?: sensorSelect<ExtArgs> | null
    /**
     * The data needed to create a sensor.
     */
    data: XOR<sensorCreateInput, sensorUncheckedCreateInput>
  }


  /**
   * sensor createMany
   */
  export type sensorCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many sensors.
     */
    data: sensorCreateManyInput | sensorCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * sensor update
   */
  export type sensorUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the sensor
     */
    select?: sensorSelect<ExtArgs> | null
    /**
     * The data needed to update a sensor.
     */
    data: XOR<sensorUpdateInput, sensorUncheckedUpdateInput>
    /**
     * Choose, which sensor to update.
     */
    where: sensorWhereUniqueInput
  }


  /**
   * sensor updateMany
   */
  export type sensorUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update sensors.
     */
    data: XOR<sensorUpdateManyMutationInput, sensorUncheckedUpdateManyInput>
    /**
     * Filter which sensors to update
     */
    where?: sensorWhereInput
  }


  /**
   * sensor upsert
   */
  export type sensorUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the sensor
     */
    select?: sensorSelect<ExtArgs> | null
    /**
     * The filter to search for the sensor to update in case it exists.
     */
    where: sensorWhereUniqueInput
    /**
     * In case the sensor found by the `where` argument doesn't exist, create a new sensor with this data.
     */
    create: XOR<sensorCreateInput, sensorUncheckedCreateInput>
    /**
     * In case the sensor was found with the provided `where` argument, update it with this data.
     */
    update: XOR<sensorUpdateInput, sensorUncheckedUpdateInput>
  }


  /**
   * sensor delete
   */
  export type sensorDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the sensor
     */
    select?: sensorSelect<ExtArgs> | null
    /**
     * Filter which sensor to delete.
     */
    where: sensorWhereUniqueInput
  }


  /**
   * sensor deleteMany
   */
  export type sensorDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which sensors to delete
     */
    where?: sensorWhereInput
  }


  /**
   * sensor without action
   */
  export type sensorDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the sensor
     */
    select?: sensorSelect<ExtArgs> | null
  }



  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const CustomerConsumptionScalarFieldEnum: {
    timestamp: 'timestamp',
    sensorId: 'sensorId',
    P: 'P',
    Q: 'Q'
  };

  export type CustomerConsumptionScalarFieldEnum = (typeof CustomerConsumptionScalarFieldEnum)[keyof typeof CustomerConsumptionScalarFieldEnum]


  export const LossScalarFieldEnum: {
    timestamp: 'timestamp',
    feeder: 'feeder',
    segment: 'segment',
    loss: 'loss'
  };

  export type LossScalarFieldEnum = (typeof LossScalarFieldEnum)[keyof typeof LossScalarFieldEnum]


  export const PowerScalarFieldEnum: {
    timestamp: 'timestamp',
    sensorId: 'sensorId',
    Pfeed: 'Pfeed',
    Qfeed: 'Qfeed',
    Pagg: 'Pagg',
    Qagg: 'Qagg',
    faultType: 'faultType'
  };

  export type PowerScalarFieldEnum = (typeof PowerScalarFieldEnum)[keyof typeof PowerScalarFieldEnum]


  export const SensorScalarFieldEnum: {
    id: 'id',
    type: 'type',
    feeder: 'feeder',
    latitude: 'latitude',
    longitude: 'longitude',
    segment: 'segment'
  };

  export type SensorScalarFieldEnum = (typeof SensorScalarFieldEnum)[keyof typeof SensorScalarFieldEnum]


  export const SubStationPowerScalarFieldEnum: {
    timestamp: 'timestamp',
    sensorId: 'sensorId',
    Psub: 'Psub',
    Qsub: 'Qsub'
  };

  export type SubStationPowerScalarFieldEnum = (typeof SubStationPowerScalarFieldEnum)[keyof typeof SubStationPowerScalarFieldEnum]


  export const VoltageCurrentScalarFieldEnum: {
    timestamp: 'timestamp',
    sensorId: 'sensorId',
    Va: 'Va',
    Vb: 'Vb',
    Vc: 'Vc',
    Ia: 'Ia',
    Ib: 'Ib',
    Ic: 'Ic',
    faultType: 'faultType'
  };

  export type VoltageCurrentScalarFieldEnum = (typeof VoltageCurrentScalarFieldEnum)[keyof typeof VoltageCurrentScalarFieldEnum]


  export const SensorScalarFieldEnum: {
    id: 'id',
    type: 'type',
    feeder: 'feeder',
    segment: 'segment',
    latitude: 'latitude',
    longitude: 'longitude'
  };

  export type SensorScalarFieldEnum = (typeof SensorScalarFieldEnum)[keyof typeof SensorScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    
  /**
   * Deep Input Types
   */


  export type CustomerConsumptionWhereInput = {
    AND?: CustomerConsumptionWhereInput | CustomerConsumptionWhereInput[]
    OR?: CustomerConsumptionWhereInput[]
    NOT?: CustomerConsumptionWhereInput | CustomerConsumptionWhereInput[]
    timestamp?: DateTimeFilter<"CustomerConsumption"> | Date | string
    sensorId?: StringFilter<"CustomerConsumption"> | string
    P?: FloatFilter<"CustomerConsumption"> | number
    Q?: FloatFilter<"CustomerConsumption"> | number
    Sensor?: XOR<SensorRelationFilter, SensorWhereInput>
  }

  export type CustomerConsumptionOrderByWithRelationInput = {
    timestamp?: SortOrder
    sensorId?: SortOrder
    P?: SortOrder
    Q?: SortOrder
    Sensor?: SensorOrderByWithRelationInput
  }

  export type CustomerConsumptionWhereUniqueInput = Prisma.AtLeast<{
    timestamp_sensorId?: CustomerConsumptionTimestampSensorIdCompoundUniqueInput
    AND?: CustomerConsumptionWhereInput | CustomerConsumptionWhereInput[]
    OR?: CustomerConsumptionWhereInput[]
    NOT?: CustomerConsumptionWhereInput | CustomerConsumptionWhereInput[]
    timestamp?: DateTimeFilter<"CustomerConsumption"> | Date | string
    sensorId?: StringFilter<"CustomerConsumption"> | string
    P?: FloatFilter<"CustomerConsumption"> | number
    Q?: FloatFilter<"CustomerConsumption"> | number
    Sensor?: XOR<SensorRelationFilter, SensorWhereInput>
  }, "timestamp_sensorId">

  export type CustomerConsumptionOrderByWithAggregationInput = {
    timestamp?: SortOrder
    sensorId?: SortOrder
    P?: SortOrder
    Q?: SortOrder
    _count?: CustomerConsumptionCountOrderByAggregateInput
    _avg?: CustomerConsumptionAvgOrderByAggregateInput
    _max?: CustomerConsumptionMaxOrderByAggregateInput
    _min?: CustomerConsumptionMinOrderByAggregateInput
    _sum?: CustomerConsumptionSumOrderByAggregateInput
  }

  export type CustomerConsumptionScalarWhereWithAggregatesInput = {
    AND?: CustomerConsumptionScalarWhereWithAggregatesInput | CustomerConsumptionScalarWhereWithAggregatesInput[]
    OR?: CustomerConsumptionScalarWhereWithAggregatesInput[]
    NOT?: CustomerConsumptionScalarWhereWithAggregatesInput | CustomerConsumptionScalarWhereWithAggregatesInput[]
    timestamp?: DateTimeWithAggregatesFilter<"CustomerConsumption"> | Date | string
    sensorId?: StringWithAggregatesFilter<"CustomerConsumption"> | string
    P?: FloatWithAggregatesFilter<"CustomerConsumption"> | number
    Q?: FloatWithAggregatesFilter<"CustomerConsumption"> | number
  }

  export type LossWhereInput = {
    AND?: LossWhereInput | LossWhereInput[]
    OR?: LossWhereInput[]
    NOT?: LossWhereInput | LossWhereInput[]
    timestamp?: DateTimeFilter<"Loss"> | Date | string
    feeder?: StringFilter<"Loss"> | string
    segment?: StringFilter<"Loss"> | string
    loss?: FloatFilter<"Loss"> | number
  }

  export type LossOrderByWithRelationInput = {
    timestamp?: SortOrder
    feeder?: SortOrder
    segment?: SortOrder
    loss?: SortOrder
  }

  export type LossWhereUniqueInput = Prisma.AtLeast<{
    timestamp_feeder_segment?: LossTimestampFeederSegmentCompoundUniqueInput
    AND?: LossWhereInput | LossWhereInput[]
    OR?: LossWhereInput[]
    NOT?: LossWhereInput | LossWhereInput[]
    timestamp?: DateTimeFilter<"Loss"> | Date | string
    feeder?: StringFilter<"Loss"> | string
    segment?: StringFilter<"Loss"> | string
    loss?: FloatFilter<"Loss"> | number
  }, "timestamp_feeder_segment">

  export type LossOrderByWithAggregationInput = {
    timestamp?: SortOrder
    feeder?: SortOrder
    segment?: SortOrder
    loss?: SortOrder
    _count?: LossCountOrderByAggregateInput
    _avg?: LossAvgOrderByAggregateInput
    _max?: LossMaxOrderByAggregateInput
    _min?: LossMinOrderByAggregateInput
    _sum?: LossSumOrderByAggregateInput
  }

  export type LossScalarWhereWithAggregatesInput = {
    AND?: LossScalarWhereWithAggregatesInput | LossScalarWhereWithAggregatesInput[]
    OR?: LossScalarWhereWithAggregatesInput[]
    NOT?: LossScalarWhereWithAggregatesInput | LossScalarWhereWithAggregatesInput[]
    timestamp?: DateTimeWithAggregatesFilter<"Loss"> | Date | string
    feeder?: StringWithAggregatesFilter<"Loss"> | string
    segment?: StringWithAggregatesFilter<"Loss"> | string
    loss?: FloatWithAggregatesFilter<"Loss"> | number
  }

  export type PowerWhereInput = {
    AND?: PowerWhereInput | PowerWhereInput[]
    OR?: PowerWhereInput[]
    NOT?: PowerWhereInput | PowerWhereInput[]
    timestamp?: DateTimeFilter<"Power"> | Date | string
    sensorId?: StringFilter<"Power"> | string
    Pfeed?: FloatFilter<"Power"> | number
    Qfeed?: FloatFilter<"Power"> | number
    Pagg?: FloatFilter<"Power"> | number
    Qagg?: FloatFilter<"Power"> | number
    faultType?: IntNullableFilter<"Power"> | number | null
    Sensor?: XOR<SensorRelationFilter, SensorWhereInput>
  }

  export type PowerOrderByWithRelationInput = {
    timestamp?: SortOrder
    sensorId?: SortOrder
    Pfeed?: SortOrder
    Qfeed?: SortOrder
    Pagg?: SortOrder
    Qagg?: SortOrder
    faultType?: SortOrderInput | SortOrder
    Sensor?: SensorOrderByWithRelationInput
  }

  export type PowerWhereUniqueInput = Prisma.AtLeast<{
    timestamp_sensorId?: PowerTimestampSensorIdCompoundUniqueInput
    AND?: PowerWhereInput | PowerWhereInput[]
    OR?: PowerWhereInput[]
    NOT?: PowerWhereInput | PowerWhereInput[]
    timestamp?: DateTimeFilter<"Power"> | Date | string
    sensorId?: StringFilter<"Power"> | string
    Pfeed?: FloatFilter<"Power"> | number
    Qfeed?: FloatFilter<"Power"> | number
    Pagg?: FloatFilter<"Power"> | number
    Qagg?: FloatFilter<"Power"> | number
    faultType?: IntNullableFilter<"Power"> | number | null
    Sensor?: XOR<SensorRelationFilter, SensorWhereInput>
  }, "timestamp_sensorId">

  export type PowerOrderByWithAggregationInput = {
    timestamp?: SortOrder
    sensorId?: SortOrder
    Pfeed?: SortOrder
    Qfeed?: SortOrder
    Pagg?: SortOrder
    Qagg?: SortOrder
    faultType?: SortOrderInput | SortOrder
    _count?: PowerCountOrderByAggregateInput
    _avg?: PowerAvgOrderByAggregateInput
    _max?: PowerMaxOrderByAggregateInput
    _min?: PowerMinOrderByAggregateInput
    _sum?: PowerSumOrderByAggregateInput
  }

  export type PowerScalarWhereWithAggregatesInput = {
    AND?: PowerScalarWhereWithAggregatesInput | PowerScalarWhereWithAggregatesInput[]
    OR?: PowerScalarWhereWithAggregatesInput[]
    NOT?: PowerScalarWhereWithAggregatesInput | PowerScalarWhereWithAggregatesInput[]
    timestamp?: DateTimeWithAggregatesFilter<"Power"> | Date | string
    sensorId?: StringWithAggregatesFilter<"Power"> | string
    Pfeed?: FloatWithAggregatesFilter<"Power"> | number
    Qfeed?: FloatWithAggregatesFilter<"Power"> | number
    Pagg?: FloatWithAggregatesFilter<"Power"> | number
    Qagg?: FloatWithAggregatesFilter<"Power"> | number
    faultType?: IntNullableWithAggregatesFilter<"Power"> | number | null
  }

  export type SensorWhereInput = {
    AND?: SensorWhereInput | SensorWhereInput[]
    OR?: SensorWhereInput[]
    NOT?: SensorWhereInput | SensorWhereInput[]
    id?: StringFilter<"Sensor"> | string
    type?: StringFilter<"Sensor"> | string
    feeder?: StringFilter<"Sensor"> | string
    latitude?: FloatNullableFilter<"Sensor"> | number | null
    longitude?: FloatNullableFilter<"Sensor"> | number | null
    segment?: StringNullableFilter<"Sensor"> | string | null
    CustomerConsumption?: CustomerConsumptionListRelationFilter
    Power?: PowerListRelationFilter
    SubStationPower?: SubStationPowerListRelationFilter
    VoltageCurrent?: VoltageCurrentListRelationFilter
  }

  export type SensorOrderByWithRelationInput = {
    id?: SortOrder
    type?: SortOrder
    feeder?: SortOrder
    latitude?: SortOrderInput | SortOrder
    longitude?: SortOrderInput | SortOrder
    segment?: SortOrderInput | SortOrder
    CustomerConsumption?: CustomerConsumptionOrderByRelationAggregateInput
    Power?: PowerOrderByRelationAggregateInput
    SubStationPower?: SubStationPowerOrderByRelationAggregateInput
    VoltageCurrent?: VoltageCurrentOrderByRelationAggregateInput
  }

  export type SensorWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: SensorWhereInput | SensorWhereInput[]
    OR?: SensorWhereInput[]
    NOT?: SensorWhereInput | SensorWhereInput[]
    type?: StringFilter<"Sensor"> | string
    feeder?: StringFilter<"Sensor"> | string
    latitude?: FloatNullableFilter<"Sensor"> | number | null
    longitude?: FloatNullableFilter<"Sensor"> | number | null
    segment?: StringNullableFilter<"Sensor"> | string | null
    CustomerConsumption?: CustomerConsumptionListRelationFilter
    Power?: PowerListRelationFilter
    SubStationPower?: SubStationPowerListRelationFilter
    VoltageCurrent?: VoltageCurrentListRelationFilter
  }, "id">

  export type SensorOrderByWithAggregationInput = {
    id?: SortOrder
    type?: SortOrder
    feeder?: SortOrder
    latitude?: SortOrderInput | SortOrder
    longitude?: SortOrderInput | SortOrder
    segment?: SortOrderInput | SortOrder
    _count?: SensorCountOrderByAggregateInput
    _avg?: SensorAvgOrderByAggregateInput
    _max?: SensorMaxOrderByAggregateInput
    _min?: SensorMinOrderByAggregateInput
    _sum?: SensorSumOrderByAggregateInput
  }

  export type SensorScalarWhereWithAggregatesInput = {
    AND?: SensorScalarWhereWithAggregatesInput | SensorScalarWhereWithAggregatesInput[]
    OR?: SensorScalarWhereWithAggregatesInput[]
    NOT?: SensorScalarWhereWithAggregatesInput | SensorScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Sensor"> | string
    type?: StringWithAggregatesFilter<"Sensor"> | string
    feeder?: StringWithAggregatesFilter<"Sensor"> | string
    latitude?: FloatNullableWithAggregatesFilter<"Sensor"> | number | null
    longitude?: FloatNullableWithAggregatesFilter<"Sensor"> | number | null
    segment?: StringNullableWithAggregatesFilter<"Sensor"> | string | null
  }

  export type SubStationPowerWhereInput = {
    AND?: SubStationPowerWhereInput | SubStationPowerWhereInput[]
    OR?: SubStationPowerWhereInput[]
    NOT?: SubStationPowerWhereInput | SubStationPowerWhereInput[]
    timestamp?: DateTimeFilter<"SubStationPower"> | Date | string
    sensorId?: StringFilter<"SubStationPower"> | string
    Psub?: FloatFilter<"SubStationPower"> | number
    Qsub?: FloatFilter<"SubStationPower"> | number
    Sensor?: XOR<SensorRelationFilter, SensorWhereInput>
  }

  export type SubStationPowerOrderByWithRelationInput = {
    timestamp?: SortOrder
    sensorId?: SortOrder
    Psub?: SortOrder
    Qsub?: SortOrder
    Sensor?: SensorOrderByWithRelationInput
  }

  export type SubStationPowerWhereUniqueInput = Prisma.AtLeast<{
    timestamp_sensorId?: SubStationPowerTimestampSensorIdCompoundUniqueInput
    AND?: SubStationPowerWhereInput | SubStationPowerWhereInput[]
    OR?: SubStationPowerWhereInput[]
    NOT?: SubStationPowerWhereInput | SubStationPowerWhereInput[]
    timestamp?: DateTimeFilter<"SubStationPower"> | Date | string
    sensorId?: StringFilter<"SubStationPower"> | string
    Psub?: FloatFilter<"SubStationPower"> | number
    Qsub?: FloatFilter<"SubStationPower"> | number
    Sensor?: XOR<SensorRelationFilter, SensorWhereInput>
  }, "timestamp_sensorId">

  export type SubStationPowerOrderByWithAggregationInput = {
    timestamp?: SortOrder
    sensorId?: SortOrder
    Psub?: SortOrder
    Qsub?: SortOrder
    _count?: SubStationPowerCountOrderByAggregateInput
    _avg?: SubStationPowerAvgOrderByAggregateInput
    _max?: SubStationPowerMaxOrderByAggregateInput
    _min?: SubStationPowerMinOrderByAggregateInput
    _sum?: SubStationPowerSumOrderByAggregateInput
  }

  export type SubStationPowerScalarWhereWithAggregatesInput = {
    AND?: SubStationPowerScalarWhereWithAggregatesInput | SubStationPowerScalarWhereWithAggregatesInput[]
    OR?: SubStationPowerScalarWhereWithAggregatesInput[]
    NOT?: SubStationPowerScalarWhereWithAggregatesInput | SubStationPowerScalarWhereWithAggregatesInput[]
    timestamp?: DateTimeWithAggregatesFilter<"SubStationPower"> | Date | string
    sensorId?: StringWithAggregatesFilter<"SubStationPower"> | string
    Psub?: FloatWithAggregatesFilter<"SubStationPower"> | number
    Qsub?: FloatWithAggregatesFilter<"SubStationPower"> | number
  }

  export type VoltageCurrentWhereInput = {
    AND?: VoltageCurrentWhereInput | VoltageCurrentWhereInput[]
    OR?: VoltageCurrentWhereInput[]
    NOT?: VoltageCurrentWhereInput | VoltageCurrentWhereInput[]
    timestamp?: DateTimeFilter<"VoltageCurrent"> | Date | string
    sensorId?: StringFilter<"VoltageCurrent"> | string
    Va?: FloatFilter<"VoltageCurrent"> | number
    Vb?: FloatFilter<"VoltageCurrent"> | number
    Vc?: FloatFilter<"VoltageCurrent"> | number
    Ia?: FloatFilter<"VoltageCurrent"> | number
    Ib?: FloatFilter<"VoltageCurrent"> | number
    Ic?: FloatFilter<"VoltageCurrent"> | number
    faultType?: IntNullableFilter<"VoltageCurrent"> | number | null
    Sensor?: XOR<SensorRelationFilter, SensorWhereInput>
  }

  export type VoltageCurrentOrderByWithRelationInput = {
    timestamp?: SortOrder
    sensorId?: SortOrder
    Va?: SortOrder
    Vb?: SortOrder
    Vc?: SortOrder
    Ia?: SortOrder
    Ib?: SortOrder
    Ic?: SortOrder
    faultType?: SortOrderInput | SortOrder
    Sensor?: SensorOrderByWithRelationInput
  }

  export type VoltageCurrentWhereUniqueInput = Prisma.AtLeast<{
    timestamp_sensorId?: VoltageCurrentTimestampSensorIdCompoundUniqueInput
    AND?: VoltageCurrentWhereInput | VoltageCurrentWhereInput[]
    OR?: VoltageCurrentWhereInput[]
    NOT?: VoltageCurrentWhereInput | VoltageCurrentWhereInput[]
    timestamp?: DateTimeFilter<"VoltageCurrent"> | Date | string
    sensorId?: StringFilter<"VoltageCurrent"> | string
    Va?: FloatFilter<"VoltageCurrent"> | number
    Vb?: FloatFilter<"VoltageCurrent"> | number
    Vc?: FloatFilter<"VoltageCurrent"> | number
    Ia?: FloatFilter<"VoltageCurrent"> | number
    Ib?: FloatFilter<"VoltageCurrent"> | number
    Ic?: FloatFilter<"VoltageCurrent"> | number
    faultType?: IntNullableFilter<"VoltageCurrent"> | number | null
    Sensor?: XOR<SensorRelationFilter, SensorWhereInput>
  }, "timestamp_sensorId">

  export type VoltageCurrentOrderByWithAggregationInput = {
    timestamp?: SortOrder
    sensorId?: SortOrder
    Va?: SortOrder
    Vb?: SortOrder
    Vc?: SortOrder
    Ia?: SortOrder
    Ib?: SortOrder
    Ic?: SortOrder
    faultType?: SortOrderInput | SortOrder
    _count?: VoltageCurrentCountOrderByAggregateInput
    _avg?: VoltageCurrentAvgOrderByAggregateInput
    _max?: VoltageCurrentMaxOrderByAggregateInput
    _min?: VoltageCurrentMinOrderByAggregateInput
    _sum?: VoltageCurrentSumOrderByAggregateInput
  }

  export type VoltageCurrentScalarWhereWithAggregatesInput = {
    AND?: VoltageCurrentScalarWhereWithAggregatesInput | VoltageCurrentScalarWhereWithAggregatesInput[]
    OR?: VoltageCurrentScalarWhereWithAggregatesInput[]
    NOT?: VoltageCurrentScalarWhereWithAggregatesInput | VoltageCurrentScalarWhereWithAggregatesInput[]
    timestamp?: DateTimeWithAggregatesFilter<"VoltageCurrent"> | Date | string
    sensorId?: StringWithAggregatesFilter<"VoltageCurrent"> | string
    Va?: FloatWithAggregatesFilter<"VoltageCurrent"> | number
    Vb?: FloatWithAggregatesFilter<"VoltageCurrent"> | number
    Vc?: FloatWithAggregatesFilter<"VoltageCurrent"> | number
    Ia?: FloatWithAggregatesFilter<"VoltageCurrent"> | number
    Ib?: FloatWithAggregatesFilter<"VoltageCurrent"> | number
    Ic?: FloatWithAggregatesFilter<"VoltageCurrent"> | number
    faultType?: IntNullableWithAggregatesFilter<"VoltageCurrent"> | number | null
  }

  export type sensorWhereInput = {
    AND?: sensorWhereInput | sensorWhereInput[]
    OR?: sensorWhereInput[]
    NOT?: sensorWhereInput | sensorWhereInput[]
    id?: StringFilter<"sensor"> | string
    type?: StringFilter<"sensor"> | string
    feeder?: StringFilter<"sensor"> | string
    segment?: StringNullableFilter<"sensor"> | string | null
    latitude?: FloatNullableFilter<"sensor"> | number | null
    longitude?: FloatNullableFilter<"sensor"> | number | null
  }

  export type sensorOrderByWithRelationInput = {
    id?: SortOrder
    type?: SortOrder
    feeder?: SortOrder
    segment?: SortOrderInput | SortOrder
    latitude?: SortOrderInput | SortOrder
    longitude?: SortOrderInput | SortOrder
  }

  export type sensorWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: sensorWhereInput | sensorWhereInput[]
    OR?: sensorWhereInput[]
    NOT?: sensorWhereInput | sensorWhereInput[]
    type?: StringFilter<"sensor"> | string
    feeder?: StringFilter<"sensor"> | string
    segment?: StringNullableFilter<"sensor"> | string | null
    latitude?: FloatNullableFilter<"sensor"> | number | null
    longitude?: FloatNullableFilter<"sensor"> | number | null
  }, "id">

  export type sensorOrderByWithAggregationInput = {
    id?: SortOrder
    type?: SortOrder
    feeder?: SortOrder
    segment?: SortOrderInput | SortOrder
    latitude?: SortOrderInput | SortOrder
    longitude?: SortOrderInput | SortOrder
    _count?: sensorCountOrderByAggregateInput
    _avg?: sensorAvgOrderByAggregateInput
    _max?: sensorMaxOrderByAggregateInput
    _min?: sensorMinOrderByAggregateInput
    _sum?: sensorSumOrderByAggregateInput
  }

  export type sensorScalarWhereWithAggregatesInput = {
    AND?: sensorScalarWhereWithAggregatesInput | sensorScalarWhereWithAggregatesInput[]
    OR?: sensorScalarWhereWithAggregatesInput[]
    NOT?: sensorScalarWhereWithAggregatesInput | sensorScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"sensor"> | string
    type?: StringWithAggregatesFilter<"sensor"> | string
    feeder?: StringWithAggregatesFilter<"sensor"> | string
    segment?: StringNullableWithAggregatesFilter<"sensor"> | string | null
    latitude?: FloatNullableWithAggregatesFilter<"sensor"> | number | null
    longitude?: FloatNullableWithAggregatesFilter<"sensor"> | number | null
  }

  export type CustomerConsumptionCreateInput = {
    timestamp: Date | string
    P: number
    Q: number
    Sensor: SensorCreateNestedOneWithoutCustomerConsumptionInput
  }

  export type CustomerConsumptionUncheckedCreateInput = {
    timestamp: Date | string
    sensorId: string
    P: number
    Q: number
  }

  export type CustomerConsumptionUpdateInput = {
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    P?: FloatFieldUpdateOperationsInput | number
    Q?: FloatFieldUpdateOperationsInput | number
    Sensor?: SensorUpdateOneRequiredWithoutCustomerConsumptionNestedInput
  }

  export type CustomerConsumptionUncheckedUpdateInput = {
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    sensorId?: StringFieldUpdateOperationsInput | string
    P?: FloatFieldUpdateOperationsInput | number
    Q?: FloatFieldUpdateOperationsInput | number
  }

  export type CustomerConsumptionCreateManyInput = {
    timestamp: Date | string
    sensorId: string
    P: number
    Q: number
  }

  export type CustomerConsumptionUpdateManyMutationInput = {
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    P?: FloatFieldUpdateOperationsInput | number
    Q?: FloatFieldUpdateOperationsInput | number
  }

  export type CustomerConsumptionUncheckedUpdateManyInput = {
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    sensorId?: StringFieldUpdateOperationsInput | string
    P?: FloatFieldUpdateOperationsInput | number
    Q?: FloatFieldUpdateOperationsInput | number
  }

  export type LossCreateInput = {
    timestamp: Date | string
    feeder: string
    segment: string
    loss: number
  }

  export type LossUncheckedCreateInput = {
    timestamp: Date | string
    feeder: string
    segment: string
    loss: number
  }

  export type LossUpdateInput = {
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    feeder?: StringFieldUpdateOperationsInput | string
    segment?: StringFieldUpdateOperationsInput | string
    loss?: FloatFieldUpdateOperationsInput | number
  }

  export type LossUncheckedUpdateInput = {
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    feeder?: StringFieldUpdateOperationsInput | string
    segment?: StringFieldUpdateOperationsInput | string
    loss?: FloatFieldUpdateOperationsInput | number
  }

  export type LossCreateManyInput = {
    timestamp: Date | string
    feeder: string
    segment: string
    loss: number
  }

  export type LossUpdateManyMutationInput = {
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    feeder?: StringFieldUpdateOperationsInput | string
    segment?: StringFieldUpdateOperationsInput | string
    loss?: FloatFieldUpdateOperationsInput | number
  }

  export type LossUncheckedUpdateManyInput = {
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    feeder?: StringFieldUpdateOperationsInput | string
    segment?: StringFieldUpdateOperationsInput | string
    loss?: FloatFieldUpdateOperationsInput | number
  }

  export type PowerCreateInput = {
    timestamp: Date | string
    Pfeed: number
    Qfeed: number
    Pagg: number
    Qagg: number
    faultType?: number | null
    Sensor: SensorCreateNestedOneWithoutPowerInput
  }

  export type PowerUncheckedCreateInput = {
    timestamp: Date | string
    sensorId: string
    Pfeed: number
    Qfeed: number
    Pagg: number
    Qagg: number
    faultType?: number | null
  }

  export type PowerUpdateInput = {
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    Pfeed?: FloatFieldUpdateOperationsInput | number
    Qfeed?: FloatFieldUpdateOperationsInput | number
    Pagg?: FloatFieldUpdateOperationsInput | number
    Qagg?: FloatFieldUpdateOperationsInput | number
    faultType?: NullableIntFieldUpdateOperationsInput | number | null
    Sensor?: SensorUpdateOneRequiredWithoutPowerNestedInput
  }

  export type PowerUncheckedUpdateInput = {
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    sensorId?: StringFieldUpdateOperationsInput | string
    Pfeed?: FloatFieldUpdateOperationsInput | number
    Qfeed?: FloatFieldUpdateOperationsInput | number
    Pagg?: FloatFieldUpdateOperationsInput | number
    Qagg?: FloatFieldUpdateOperationsInput | number
    faultType?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type PowerCreateManyInput = {
    timestamp: Date | string
    sensorId: string
    Pfeed: number
    Qfeed: number
    Pagg: number
    Qagg: number
    faultType?: number | null
  }

  export type PowerUpdateManyMutationInput = {
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    Pfeed?: FloatFieldUpdateOperationsInput | number
    Qfeed?: FloatFieldUpdateOperationsInput | number
    Pagg?: FloatFieldUpdateOperationsInput | number
    Qagg?: FloatFieldUpdateOperationsInput | number
    faultType?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type PowerUncheckedUpdateManyInput = {
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    sensorId?: StringFieldUpdateOperationsInput | string
    Pfeed?: FloatFieldUpdateOperationsInput | number
    Qfeed?: FloatFieldUpdateOperationsInput | number
    Pagg?: FloatFieldUpdateOperationsInput | number
    Qagg?: FloatFieldUpdateOperationsInput | number
    faultType?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type SensorCreateInput = {
    id: string
    type: string
    feeder: string
    latitude?: number | null
    longitude?: number | null
    segment?: string | null
    CustomerConsumption?: CustomerConsumptionCreateNestedManyWithoutSensorInput
    Power?: PowerCreateNestedManyWithoutSensorInput
    SubStationPower?: SubStationPowerCreateNestedManyWithoutSensorInput
    VoltageCurrent?: VoltageCurrentCreateNestedManyWithoutSensorInput
  }

  export type SensorUncheckedCreateInput = {
    id: string
    type: string
    feeder: string
    latitude?: number | null
    longitude?: number | null
    segment?: string | null
    CustomerConsumption?: CustomerConsumptionUncheckedCreateNestedManyWithoutSensorInput
    Power?: PowerUncheckedCreateNestedManyWithoutSensorInput
    SubStationPower?: SubStationPowerUncheckedCreateNestedManyWithoutSensorInput
    VoltageCurrent?: VoltageCurrentUncheckedCreateNestedManyWithoutSensorInput
  }

  export type SensorUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    feeder?: StringFieldUpdateOperationsInput | string
    latitude?: NullableFloatFieldUpdateOperationsInput | number | null
    longitude?: NullableFloatFieldUpdateOperationsInput | number | null
    segment?: NullableStringFieldUpdateOperationsInput | string | null
    CustomerConsumption?: CustomerConsumptionUpdateManyWithoutSensorNestedInput
    Power?: PowerUpdateManyWithoutSensorNestedInput
    SubStationPower?: SubStationPowerUpdateManyWithoutSensorNestedInput
    VoltageCurrent?: VoltageCurrentUpdateManyWithoutSensorNestedInput
  }

  export type SensorUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    feeder?: StringFieldUpdateOperationsInput | string
    latitude?: NullableFloatFieldUpdateOperationsInput | number | null
    longitude?: NullableFloatFieldUpdateOperationsInput | number | null
    segment?: NullableStringFieldUpdateOperationsInput | string | null
    CustomerConsumption?: CustomerConsumptionUncheckedUpdateManyWithoutSensorNestedInput
    Power?: PowerUncheckedUpdateManyWithoutSensorNestedInput
    SubStationPower?: SubStationPowerUncheckedUpdateManyWithoutSensorNestedInput
    VoltageCurrent?: VoltageCurrentUncheckedUpdateManyWithoutSensorNestedInput
  }

  export type SensorCreateManyInput = {
    id: string
    type: string
    feeder: string
    latitude?: number | null
    longitude?: number | null
    segment?: string | null
  }

  export type SensorUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    feeder?: StringFieldUpdateOperationsInput | string
    latitude?: NullableFloatFieldUpdateOperationsInput | number | null
    longitude?: NullableFloatFieldUpdateOperationsInput | number | null
    segment?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SensorUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    feeder?: StringFieldUpdateOperationsInput | string
    latitude?: NullableFloatFieldUpdateOperationsInput | number | null
    longitude?: NullableFloatFieldUpdateOperationsInput | number | null
    segment?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SubStationPowerCreateInput = {
    timestamp: Date | string
    Psub: number
    Qsub: number
    Sensor: SensorCreateNestedOneWithoutSubStationPowerInput
  }

  export type SubStationPowerUncheckedCreateInput = {
    timestamp: Date | string
    sensorId: string
    Psub: number
    Qsub: number
  }

  export type SubStationPowerUpdateInput = {
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    Psub?: FloatFieldUpdateOperationsInput | number
    Qsub?: FloatFieldUpdateOperationsInput | number
    Sensor?: SensorUpdateOneRequiredWithoutSubStationPowerNestedInput
  }

  export type SubStationPowerUncheckedUpdateInput = {
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    sensorId?: StringFieldUpdateOperationsInput | string
    Psub?: FloatFieldUpdateOperationsInput | number
    Qsub?: FloatFieldUpdateOperationsInput | number
  }

  export type SubStationPowerCreateManyInput = {
    timestamp: Date | string
    sensorId: string
    Psub: number
    Qsub: number
  }

  export type SubStationPowerUpdateManyMutationInput = {
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    Psub?: FloatFieldUpdateOperationsInput | number
    Qsub?: FloatFieldUpdateOperationsInput | number
  }

  export type SubStationPowerUncheckedUpdateManyInput = {
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    sensorId?: StringFieldUpdateOperationsInput | string
    Psub?: FloatFieldUpdateOperationsInput | number
    Qsub?: FloatFieldUpdateOperationsInput | number
  }

  export type VoltageCurrentCreateInput = {
    timestamp: Date | string
    Va: number
    Vb: number
    Vc: number
    Ia: number
    Ib: number
    Ic: number
    faultType?: number | null
    Sensor: SensorCreateNestedOneWithoutVoltageCurrentInput
  }

  export type VoltageCurrentUncheckedCreateInput = {
    timestamp: Date | string
    sensorId: string
    Va: number
    Vb: number
    Vc: number
    Ia: number
    Ib: number
    Ic: number
    faultType?: number | null
  }

  export type VoltageCurrentUpdateInput = {
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    Va?: FloatFieldUpdateOperationsInput | number
    Vb?: FloatFieldUpdateOperationsInput | number
    Vc?: FloatFieldUpdateOperationsInput | number
    Ia?: FloatFieldUpdateOperationsInput | number
    Ib?: FloatFieldUpdateOperationsInput | number
    Ic?: FloatFieldUpdateOperationsInput | number
    faultType?: NullableIntFieldUpdateOperationsInput | number | null
    Sensor?: SensorUpdateOneRequiredWithoutVoltageCurrentNestedInput
  }

  export type VoltageCurrentUncheckedUpdateInput = {
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    sensorId?: StringFieldUpdateOperationsInput | string
    Va?: FloatFieldUpdateOperationsInput | number
    Vb?: FloatFieldUpdateOperationsInput | number
    Vc?: FloatFieldUpdateOperationsInput | number
    Ia?: FloatFieldUpdateOperationsInput | number
    Ib?: FloatFieldUpdateOperationsInput | number
    Ic?: FloatFieldUpdateOperationsInput | number
    faultType?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type VoltageCurrentCreateManyInput = {
    timestamp: Date | string
    sensorId: string
    Va: number
    Vb: number
    Vc: number
    Ia: number
    Ib: number
    Ic: number
    faultType?: number | null
  }

  export type VoltageCurrentUpdateManyMutationInput = {
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    Va?: FloatFieldUpdateOperationsInput | number
    Vb?: FloatFieldUpdateOperationsInput | number
    Vc?: FloatFieldUpdateOperationsInput | number
    Ia?: FloatFieldUpdateOperationsInput | number
    Ib?: FloatFieldUpdateOperationsInput | number
    Ic?: FloatFieldUpdateOperationsInput | number
    faultType?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type VoltageCurrentUncheckedUpdateManyInput = {
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    sensorId?: StringFieldUpdateOperationsInput | string
    Va?: FloatFieldUpdateOperationsInput | number
    Vb?: FloatFieldUpdateOperationsInput | number
    Vc?: FloatFieldUpdateOperationsInput | number
    Ia?: FloatFieldUpdateOperationsInput | number
    Ib?: FloatFieldUpdateOperationsInput | number
    Ic?: FloatFieldUpdateOperationsInput | number
    faultType?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type sensorCreateInput = {
    id: string
    type: string
    feeder: string
    segment?: string | null
    latitude?: number | null
    longitude?: number | null
  }

  export type sensorUncheckedCreateInput = {
    id: string
    type: string
    feeder: string
    segment?: string | null
    latitude?: number | null
    longitude?: number | null
  }

  export type sensorUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    feeder?: StringFieldUpdateOperationsInput | string
    segment?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableFloatFieldUpdateOperationsInput | number | null
    longitude?: NullableFloatFieldUpdateOperationsInput | number | null
  }

  export type sensorUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    feeder?: StringFieldUpdateOperationsInput | string
    segment?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableFloatFieldUpdateOperationsInput | number | null
    longitude?: NullableFloatFieldUpdateOperationsInput | number | null
  }

  export type sensorCreateManyInput = {
    id: string
    type: string
    feeder: string
    segment?: string | null
    latitude?: number | null
    longitude?: number | null
  }

  export type sensorUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    feeder?: StringFieldUpdateOperationsInput | string
    segment?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableFloatFieldUpdateOperationsInput | number | null
    longitude?: NullableFloatFieldUpdateOperationsInput | number | null
  }

  export type sensorUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    feeder?: StringFieldUpdateOperationsInput | string
    segment?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableFloatFieldUpdateOperationsInput | number | null
    longitude?: NullableFloatFieldUpdateOperationsInput | number | null
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type SensorRelationFilter = {
    is?: SensorWhereInput
    isNot?: SensorWhereInput
  }

  export type CustomerConsumptionTimestampSensorIdCompoundUniqueInput = {
    timestamp: Date | string
    sensorId: string
  }

  export type CustomerConsumptionCountOrderByAggregateInput = {
    timestamp?: SortOrder
    sensorId?: SortOrder
    P?: SortOrder
    Q?: SortOrder
  }

  export type CustomerConsumptionAvgOrderByAggregateInput = {
    P?: SortOrder
    Q?: SortOrder
  }

  export type CustomerConsumptionMaxOrderByAggregateInput = {
    timestamp?: SortOrder
    sensorId?: SortOrder
    P?: SortOrder
    Q?: SortOrder
  }

  export type CustomerConsumptionMinOrderByAggregateInput = {
    timestamp?: SortOrder
    sensorId?: SortOrder
    P?: SortOrder
    Q?: SortOrder
  }

  export type CustomerConsumptionSumOrderByAggregateInput = {
    P?: SortOrder
    Q?: SortOrder
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type LossTimestampFeederSegmentCompoundUniqueInput = {
    timestamp: Date | string
    feeder: string
    segment: string
  }

  export type LossCountOrderByAggregateInput = {
    timestamp?: SortOrder
    feeder?: SortOrder
    segment?: SortOrder
    loss?: SortOrder
  }

  export type LossAvgOrderByAggregateInput = {
    loss?: SortOrder
  }

  export type LossMaxOrderByAggregateInput = {
    timestamp?: SortOrder
    feeder?: SortOrder
    segment?: SortOrder
    loss?: SortOrder
  }

  export type LossMinOrderByAggregateInput = {
    timestamp?: SortOrder
    feeder?: SortOrder
    segment?: SortOrder
    loss?: SortOrder
  }

  export type LossSumOrderByAggregateInput = {
    loss?: SortOrder
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type PowerTimestampSensorIdCompoundUniqueInput = {
    timestamp: Date | string
    sensorId: string
  }

  export type PowerCountOrderByAggregateInput = {
    timestamp?: SortOrder
    sensorId?: SortOrder
    Pfeed?: SortOrder
    Qfeed?: SortOrder
    Pagg?: SortOrder
    Qagg?: SortOrder
    faultType?: SortOrder
  }

  export type PowerAvgOrderByAggregateInput = {
    Pfeed?: SortOrder
    Qfeed?: SortOrder
    Pagg?: SortOrder
    Qagg?: SortOrder
    faultType?: SortOrder
  }

  export type PowerMaxOrderByAggregateInput = {
    timestamp?: SortOrder
    sensorId?: SortOrder
    Pfeed?: SortOrder
    Qfeed?: SortOrder
    Pagg?: SortOrder
    Qagg?: SortOrder
    faultType?: SortOrder
  }

  export type PowerMinOrderByAggregateInput = {
    timestamp?: SortOrder
    sensorId?: SortOrder
    Pfeed?: SortOrder
    Qfeed?: SortOrder
    Pagg?: SortOrder
    Qagg?: SortOrder
    faultType?: SortOrder
  }

  export type PowerSumOrderByAggregateInput = {
    Pfeed?: SortOrder
    Qfeed?: SortOrder
    Pagg?: SortOrder
    Qagg?: SortOrder
    faultType?: SortOrder
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type FloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type CustomerConsumptionListRelationFilter = {
    every?: CustomerConsumptionWhereInput
    some?: CustomerConsumptionWhereInput
    none?: CustomerConsumptionWhereInput
  }

  export type PowerListRelationFilter = {
    every?: PowerWhereInput
    some?: PowerWhereInput
    none?: PowerWhereInput
  }

  export type SubStationPowerListRelationFilter = {
    every?: SubStationPowerWhereInput
    some?: SubStationPowerWhereInput
    none?: SubStationPowerWhereInput
  }

  export type VoltageCurrentListRelationFilter = {
    every?: VoltageCurrentWhereInput
    some?: VoltageCurrentWhereInput
    none?: VoltageCurrentWhereInput
  }

  export type CustomerConsumptionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PowerOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SubStationPowerOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type VoltageCurrentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SensorCountOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    feeder?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
    segment?: SortOrder
  }

  export type SensorAvgOrderByAggregateInput = {
    latitude?: SortOrder
    longitude?: SortOrder
  }

  export type SensorMaxOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    feeder?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
    segment?: SortOrder
  }

  export type SensorMinOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    feeder?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
    segment?: SortOrder
  }

  export type SensorSumOrderByAggregateInput = {
    latitude?: SortOrder
    longitude?: SortOrder
  }

  export type FloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type SubStationPowerTimestampSensorIdCompoundUniqueInput = {
    timestamp: Date | string
    sensorId: string
  }

  export type SubStationPowerCountOrderByAggregateInput = {
    timestamp?: SortOrder
    sensorId?: SortOrder
    Psub?: SortOrder
    Qsub?: SortOrder
  }

  export type SubStationPowerAvgOrderByAggregateInput = {
    Psub?: SortOrder
    Qsub?: SortOrder
  }

  export type SubStationPowerMaxOrderByAggregateInput = {
    timestamp?: SortOrder
    sensorId?: SortOrder
    Psub?: SortOrder
    Qsub?: SortOrder
  }

  export type SubStationPowerMinOrderByAggregateInput = {
    timestamp?: SortOrder
    sensorId?: SortOrder
    Psub?: SortOrder
    Qsub?: SortOrder
  }

  export type SubStationPowerSumOrderByAggregateInput = {
    Psub?: SortOrder
    Qsub?: SortOrder
  }

  export type VoltageCurrentTimestampSensorIdCompoundUniqueInput = {
    timestamp: Date | string
    sensorId: string
  }

  export type VoltageCurrentCountOrderByAggregateInput = {
    timestamp?: SortOrder
    sensorId?: SortOrder
    Va?: SortOrder
    Vb?: SortOrder
    Vc?: SortOrder
    Ia?: SortOrder
    Ib?: SortOrder
    Ic?: SortOrder
    faultType?: SortOrder
  }

  export type VoltageCurrentAvgOrderByAggregateInput = {
    Va?: SortOrder
    Vb?: SortOrder
    Vc?: SortOrder
    Ia?: SortOrder
    Ib?: SortOrder
    Ic?: SortOrder
    faultType?: SortOrder
  }

  export type VoltageCurrentMaxOrderByAggregateInput = {
    timestamp?: SortOrder
    sensorId?: SortOrder
    Va?: SortOrder
    Vb?: SortOrder
    Vc?: SortOrder
    Ia?: SortOrder
    Ib?: SortOrder
    Ic?: SortOrder
    faultType?: SortOrder
  }

  export type VoltageCurrentMinOrderByAggregateInput = {
    timestamp?: SortOrder
    sensorId?: SortOrder
    Va?: SortOrder
    Vb?: SortOrder
    Vc?: SortOrder
    Ia?: SortOrder
    Ib?: SortOrder
    Ic?: SortOrder
    faultType?: SortOrder
  }

  export type VoltageCurrentSumOrderByAggregateInput = {
    Va?: SortOrder
    Vb?: SortOrder
    Vc?: SortOrder
    Ia?: SortOrder
    Ib?: SortOrder
    Ic?: SortOrder
    faultType?: SortOrder
  }

  export type sensorCountOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    feeder?: SortOrder
    segment?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
  }

  export type sensorAvgOrderByAggregateInput = {
    latitude?: SortOrder
    longitude?: SortOrder
  }

  export type sensorMaxOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    feeder?: SortOrder
    segment?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
  }

  export type sensorMinOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    feeder?: SortOrder
    segment?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
  }

  export type sensorSumOrderByAggregateInput = {
    latitude?: SortOrder
    longitude?: SortOrder
  }

  export type SensorCreateNestedOneWithoutCustomerConsumptionInput = {
    create?: XOR<SensorCreateWithoutCustomerConsumptionInput, SensorUncheckedCreateWithoutCustomerConsumptionInput>
    connectOrCreate?: SensorCreateOrConnectWithoutCustomerConsumptionInput
    connect?: SensorWhereUniqueInput
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type SensorUpdateOneRequiredWithoutCustomerConsumptionNestedInput = {
    create?: XOR<SensorCreateWithoutCustomerConsumptionInput, SensorUncheckedCreateWithoutCustomerConsumptionInput>
    connectOrCreate?: SensorCreateOrConnectWithoutCustomerConsumptionInput
    upsert?: SensorUpsertWithoutCustomerConsumptionInput
    connect?: SensorWhereUniqueInput
    update?: XOR<XOR<SensorUpdateToOneWithWhereWithoutCustomerConsumptionInput, SensorUpdateWithoutCustomerConsumptionInput>, SensorUncheckedUpdateWithoutCustomerConsumptionInput>
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type SensorCreateNestedOneWithoutPowerInput = {
    create?: XOR<SensorCreateWithoutPowerInput, SensorUncheckedCreateWithoutPowerInput>
    connectOrCreate?: SensorCreateOrConnectWithoutPowerInput
    connect?: SensorWhereUniqueInput
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type SensorUpdateOneRequiredWithoutPowerNestedInput = {
    create?: XOR<SensorCreateWithoutPowerInput, SensorUncheckedCreateWithoutPowerInput>
    connectOrCreate?: SensorCreateOrConnectWithoutPowerInput
    upsert?: SensorUpsertWithoutPowerInput
    connect?: SensorWhereUniqueInput
    update?: XOR<XOR<SensorUpdateToOneWithWhereWithoutPowerInput, SensorUpdateWithoutPowerInput>, SensorUncheckedUpdateWithoutPowerInput>
  }

  export type CustomerConsumptionCreateNestedManyWithoutSensorInput = {
    create?: XOR<CustomerConsumptionCreateWithoutSensorInput, CustomerConsumptionUncheckedCreateWithoutSensorInput> | CustomerConsumptionCreateWithoutSensorInput[] | CustomerConsumptionUncheckedCreateWithoutSensorInput[]
    connectOrCreate?: CustomerConsumptionCreateOrConnectWithoutSensorInput | CustomerConsumptionCreateOrConnectWithoutSensorInput[]
    createMany?: CustomerConsumptionCreateManySensorInputEnvelope
    connect?: CustomerConsumptionWhereUniqueInput | CustomerConsumptionWhereUniqueInput[]
  }

  export type PowerCreateNestedManyWithoutSensorInput = {
    create?: XOR<PowerCreateWithoutSensorInput, PowerUncheckedCreateWithoutSensorInput> | PowerCreateWithoutSensorInput[] | PowerUncheckedCreateWithoutSensorInput[]
    connectOrCreate?: PowerCreateOrConnectWithoutSensorInput | PowerCreateOrConnectWithoutSensorInput[]
    createMany?: PowerCreateManySensorInputEnvelope
    connect?: PowerWhereUniqueInput | PowerWhereUniqueInput[]
  }

  export type SubStationPowerCreateNestedManyWithoutSensorInput = {
    create?: XOR<SubStationPowerCreateWithoutSensorInput, SubStationPowerUncheckedCreateWithoutSensorInput> | SubStationPowerCreateWithoutSensorInput[] | SubStationPowerUncheckedCreateWithoutSensorInput[]
    connectOrCreate?: SubStationPowerCreateOrConnectWithoutSensorInput | SubStationPowerCreateOrConnectWithoutSensorInput[]
    createMany?: SubStationPowerCreateManySensorInputEnvelope
    connect?: SubStationPowerWhereUniqueInput | SubStationPowerWhereUniqueInput[]
  }

  export type VoltageCurrentCreateNestedManyWithoutSensorInput = {
    create?: XOR<VoltageCurrentCreateWithoutSensorInput, VoltageCurrentUncheckedCreateWithoutSensorInput> | VoltageCurrentCreateWithoutSensorInput[] | VoltageCurrentUncheckedCreateWithoutSensorInput[]
    connectOrCreate?: VoltageCurrentCreateOrConnectWithoutSensorInput | VoltageCurrentCreateOrConnectWithoutSensorInput[]
    createMany?: VoltageCurrentCreateManySensorInputEnvelope
    connect?: VoltageCurrentWhereUniqueInput | VoltageCurrentWhereUniqueInput[]
  }

  export type CustomerConsumptionUncheckedCreateNestedManyWithoutSensorInput = {
    create?: XOR<CustomerConsumptionCreateWithoutSensorInput, CustomerConsumptionUncheckedCreateWithoutSensorInput> | CustomerConsumptionCreateWithoutSensorInput[] | CustomerConsumptionUncheckedCreateWithoutSensorInput[]
    connectOrCreate?: CustomerConsumptionCreateOrConnectWithoutSensorInput | CustomerConsumptionCreateOrConnectWithoutSensorInput[]
    createMany?: CustomerConsumptionCreateManySensorInputEnvelope
    connect?: CustomerConsumptionWhereUniqueInput | CustomerConsumptionWhereUniqueInput[]
  }

  export type PowerUncheckedCreateNestedManyWithoutSensorInput = {
    create?: XOR<PowerCreateWithoutSensorInput, PowerUncheckedCreateWithoutSensorInput> | PowerCreateWithoutSensorInput[] | PowerUncheckedCreateWithoutSensorInput[]
    connectOrCreate?: PowerCreateOrConnectWithoutSensorInput | PowerCreateOrConnectWithoutSensorInput[]
    createMany?: PowerCreateManySensorInputEnvelope
    connect?: PowerWhereUniqueInput | PowerWhereUniqueInput[]
  }

  export type SubStationPowerUncheckedCreateNestedManyWithoutSensorInput = {
    create?: XOR<SubStationPowerCreateWithoutSensorInput, SubStationPowerUncheckedCreateWithoutSensorInput> | SubStationPowerCreateWithoutSensorInput[] | SubStationPowerUncheckedCreateWithoutSensorInput[]
    connectOrCreate?: SubStationPowerCreateOrConnectWithoutSensorInput | SubStationPowerCreateOrConnectWithoutSensorInput[]
    createMany?: SubStationPowerCreateManySensorInputEnvelope
    connect?: SubStationPowerWhereUniqueInput | SubStationPowerWhereUniqueInput[]
  }

  export type VoltageCurrentUncheckedCreateNestedManyWithoutSensorInput = {
    create?: XOR<VoltageCurrentCreateWithoutSensorInput, VoltageCurrentUncheckedCreateWithoutSensorInput> | VoltageCurrentCreateWithoutSensorInput[] | VoltageCurrentUncheckedCreateWithoutSensorInput[]
    connectOrCreate?: VoltageCurrentCreateOrConnectWithoutSensorInput | VoltageCurrentCreateOrConnectWithoutSensorInput[]
    createMany?: VoltageCurrentCreateManySensorInputEnvelope
    connect?: VoltageCurrentWhereUniqueInput | VoltageCurrentWhereUniqueInput[]
  }

  export type NullableFloatFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type CustomerConsumptionUpdateManyWithoutSensorNestedInput = {
    create?: XOR<CustomerConsumptionCreateWithoutSensorInput, CustomerConsumptionUncheckedCreateWithoutSensorInput> | CustomerConsumptionCreateWithoutSensorInput[] | CustomerConsumptionUncheckedCreateWithoutSensorInput[]
    connectOrCreate?: CustomerConsumptionCreateOrConnectWithoutSensorInput | CustomerConsumptionCreateOrConnectWithoutSensorInput[]
    upsert?: CustomerConsumptionUpsertWithWhereUniqueWithoutSensorInput | CustomerConsumptionUpsertWithWhereUniqueWithoutSensorInput[]
    createMany?: CustomerConsumptionCreateManySensorInputEnvelope
    set?: CustomerConsumptionWhereUniqueInput | CustomerConsumptionWhereUniqueInput[]
    disconnect?: CustomerConsumptionWhereUniqueInput | CustomerConsumptionWhereUniqueInput[]
    delete?: CustomerConsumptionWhereUniqueInput | CustomerConsumptionWhereUniqueInput[]
    connect?: CustomerConsumptionWhereUniqueInput | CustomerConsumptionWhereUniqueInput[]
    update?: CustomerConsumptionUpdateWithWhereUniqueWithoutSensorInput | CustomerConsumptionUpdateWithWhereUniqueWithoutSensorInput[]
    updateMany?: CustomerConsumptionUpdateManyWithWhereWithoutSensorInput | CustomerConsumptionUpdateManyWithWhereWithoutSensorInput[]
    deleteMany?: CustomerConsumptionScalarWhereInput | CustomerConsumptionScalarWhereInput[]
  }

  export type PowerUpdateManyWithoutSensorNestedInput = {
    create?: XOR<PowerCreateWithoutSensorInput, PowerUncheckedCreateWithoutSensorInput> | PowerCreateWithoutSensorInput[] | PowerUncheckedCreateWithoutSensorInput[]
    connectOrCreate?: PowerCreateOrConnectWithoutSensorInput | PowerCreateOrConnectWithoutSensorInput[]
    upsert?: PowerUpsertWithWhereUniqueWithoutSensorInput | PowerUpsertWithWhereUniqueWithoutSensorInput[]
    createMany?: PowerCreateManySensorInputEnvelope
    set?: PowerWhereUniqueInput | PowerWhereUniqueInput[]
    disconnect?: PowerWhereUniqueInput | PowerWhereUniqueInput[]
    delete?: PowerWhereUniqueInput | PowerWhereUniqueInput[]
    connect?: PowerWhereUniqueInput | PowerWhereUniqueInput[]
    update?: PowerUpdateWithWhereUniqueWithoutSensorInput | PowerUpdateWithWhereUniqueWithoutSensorInput[]
    updateMany?: PowerUpdateManyWithWhereWithoutSensorInput | PowerUpdateManyWithWhereWithoutSensorInput[]
    deleteMany?: PowerScalarWhereInput | PowerScalarWhereInput[]
  }

  export type SubStationPowerUpdateManyWithoutSensorNestedInput = {
    create?: XOR<SubStationPowerCreateWithoutSensorInput, SubStationPowerUncheckedCreateWithoutSensorInput> | SubStationPowerCreateWithoutSensorInput[] | SubStationPowerUncheckedCreateWithoutSensorInput[]
    connectOrCreate?: SubStationPowerCreateOrConnectWithoutSensorInput | SubStationPowerCreateOrConnectWithoutSensorInput[]
    upsert?: SubStationPowerUpsertWithWhereUniqueWithoutSensorInput | SubStationPowerUpsertWithWhereUniqueWithoutSensorInput[]
    createMany?: SubStationPowerCreateManySensorInputEnvelope
    set?: SubStationPowerWhereUniqueInput | SubStationPowerWhereUniqueInput[]
    disconnect?: SubStationPowerWhereUniqueInput | SubStationPowerWhereUniqueInput[]
    delete?: SubStationPowerWhereUniqueInput | SubStationPowerWhereUniqueInput[]
    connect?: SubStationPowerWhereUniqueInput | SubStationPowerWhereUniqueInput[]
    update?: SubStationPowerUpdateWithWhereUniqueWithoutSensorInput | SubStationPowerUpdateWithWhereUniqueWithoutSensorInput[]
    updateMany?: SubStationPowerUpdateManyWithWhereWithoutSensorInput | SubStationPowerUpdateManyWithWhereWithoutSensorInput[]
    deleteMany?: SubStationPowerScalarWhereInput | SubStationPowerScalarWhereInput[]
  }

  export type VoltageCurrentUpdateManyWithoutSensorNestedInput = {
    create?: XOR<VoltageCurrentCreateWithoutSensorInput, VoltageCurrentUncheckedCreateWithoutSensorInput> | VoltageCurrentCreateWithoutSensorInput[] | VoltageCurrentUncheckedCreateWithoutSensorInput[]
    connectOrCreate?: VoltageCurrentCreateOrConnectWithoutSensorInput | VoltageCurrentCreateOrConnectWithoutSensorInput[]
    upsert?: VoltageCurrentUpsertWithWhereUniqueWithoutSensorInput | VoltageCurrentUpsertWithWhereUniqueWithoutSensorInput[]
    createMany?: VoltageCurrentCreateManySensorInputEnvelope
    set?: VoltageCurrentWhereUniqueInput | VoltageCurrentWhereUniqueInput[]
    disconnect?: VoltageCurrentWhereUniqueInput | VoltageCurrentWhereUniqueInput[]
    delete?: VoltageCurrentWhereUniqueInput | VoltageCurrentWhereUniqueInput[]
    connect?: VoltageCurrentWhereUniqueInput | VoltageCurrentWhereUniqueInput[]
    update?: VoltageCurrentUpdateWithWhereUniqueWithoutSensorInput | VoltageCurrentUpdateWithWhereUniqueWithoutSensorInput[]
    updateMany?: VoltageCurrentUpdateManyWithWhereWithoutSensorInput | VoltageCurrentUpdateManyWithWhereWithoutSensorInput[]
    deleteMany?: VoltageCurrentScalarWhereInput | VoltageCurrentScalarWhereInput[]
  }

  export type CustomerConsumptionUncheckedUpdateManyWithoutSensorNestedInput = {
    create?: XOR<CustomerConsumptionCreateWithoutSensorInput, CustomerConsumptionUncheckedCreateWithoutSensorInput> | CustomerConsumptionCreateWithoutSensorInput[] | CustomerConsumptionUncheckedCreateWithoutSensorInput[]
    connectOrCreate?: CustomerConsumptionCreateOrConnectWithoutSensorInput | CustomerConsumptionCreateOrConnectWithoutSensorInput[]
    upsert?: CustomerConsumptionUpsertWithWhereUniqueWithoutSensorInput | CustomerConsumptionUpsertWithWhereUniqueWithoutSensorInput[]
    createMany?: CustomerConsumptionCreateManySensorInputEnvelope
    set?: CustomerConsumptionWhereUniqueInput | CustomerConsumptionWhereUniqueInput[]
    disconnect?: CustomerConsumptionWhereUniqueInput | CustomerConsumptionWhereUniqueInput[]
    delete?: CustomerConsumptionWhereUniqueInput | CustomerConsumptionWhereUniqueInput[]
    connect?: CustomerConsumptionWhereUniqueInput | CustomerConsumptionWhereUniqueInput[]
    update?: CustomerConsumptionUpdateWithWhereUniqueWithoutSensorInput | CustomerConsumptionUpdateWithWhereUniqueWithoutSensorInput[]
    updateMany?: CustomerConsumptionUpdateManyWithWhereWithoutSensorInput | CustomerConsumptionUpdateManyWithWhereWithoutSensorInput[]
    deleteMany?: CustomerConsumptionScalarWhereInput | CustomerConsumptionScalarWhereInput[]
  }

  export type PowerUncheckedUpdateManyWithoutSensorNestedInput = {
    create?: XOR<PowerCreateWithoutSensorInput, PowerUncheckedCreateWithoutSensorInput> | PowerCreateWithoutSensorInput[] | PowerUncheckedCreateWithoutSensorInput[]
    connectOrCreate?: PowerCreateOrConnectWithoutSensorInput | PowerCreateOrConnectWithoutSensorInput[]
    upsert?: PowerUpsertWithWhereUniqueWithoutSensorInput | PowerUpsertWithWhereUniqueWithoutSensorInput[]
    createMany?: PowerCreateManySensorInputEnvelope
    set?: PowerWhereUniqueInput | PowerWhereUniqueInput[]
    disconnect?: PowerWhereUniqueInput | PowerWhereUniqueInput[]
    delete?: PowerWhereUniqueInput | PowerWhereUniqueInput[]
    connect?: PowerWhereUniqueInput | PowerWhereUniqueInput[]
    update?: PowerUpdateWithWhereUniqueWithoutSensorInput | PowerUpdateWithWhereUniqueWithoutSensorInput[]
    updateMany?: PowerUpdateManyWithWhereWithoutSensorInput | PowerUpdateManyWithWhereWithoutSensorInput[]
    deleteMany?: PowerScalarWhereInput | PowerScalarWhereInput[]
  }

  export type SubStationPowerUncheckedUpdateManyWithoutSensorNestedInput = {
    create?: XOR<SubStationPowerCreateWithoutSensorInput, SubStationPowerUncheckedCreateWithoutSensorInput> | SubStationPowerCreateWithoutSensorInput[] | SubStationPowerUncheckedCreateWithoutSensorInput[]
    connectOrCreate?: SubStationPowerCreateOrConnectWithoutSensorInput | SubStationPowerCreateOrConnectWithoutSensorInput[]
    upsert?: SubStationPowerUpsertWithWhereUniqueWithoutSensorInput | SubStationPowerUpsertWithWhereUniqueWithoutSensorInput[]
    createMany?: SubStationPowerCreateManySensorInputEnvelope
    set?: SubStationPowerWhereUniqueInput | SubStationPowerWhereUniqueInput[]
    disconnect?: SubStationPowerWhereUniqueInput | SubStationPowerWhereUniqueInput[]
    delete?: SubStationPowerWhereUniqueInput | SubStationPowerWhereUniqueInput[]
    connect?: SubStationPowerWhereUniqueInput | SubStationPowerWhereUniqueInput[]
    update?: SubStationPowerUpdateWithWhereUniqueWithoutSensorInput | SubStationPowerUpdateWithWhereUniqueWithoutSensorInput[]
    updateMany?: SubStationPowerUpdateManyWithWhereWithoutSensorInput | SubStationPowerUpdateManyWithWhereWithoutSensorInput[]
    deleteMany?: SubStationPowerScalarWhereInput | SubStationPowerScalarWhereInput[]
  }

  export type VoltageCurrentUncheckedUpdateManyWithoutSensorNestedInput = {
    create?: XOR<VoltageCurrentCreateWithoutSensorInput, VoltageCurrentUncheckedCreateWithoutSensorInput> | VoltageCurrentCreateWithoutSensorInput[] | VoltageCurrentUncheckedCreateWithoutSensorInput[]
    connectOrCreate?: VoltageCurrentCreateOrConnectWithoutSensorInput | VoltageCurrentCreateOrConnectWithoutSensorInput[]
    upsert?: VoltageCurrentUpsertWithWhereUniqueWithoutSensorInput | VoltageCurrentUpsertWithWhereUniqueWithoutSensorInput[]
    createMany?: VoltageCurrentCreateManySensorInputEnvelope
    set?: VoltageCurrentWhereUniqueInput | VoltageCurrentWhereUniqueInput[]
    disconnect?: VoltageCurrentWhereUniqueInput | VoltageCurrentWhereUniqueInput[]
    delete?: VoltageCurrentWhereUniqueInput | VoltageCurrentWhereUniqueInput[]
    connect?: VoltageCurrentWhereUniqueInput | VoltageCurrentWhereUniqueInput[]
    update?: VoltageCurrentUpdateWithWhereUniqueWithoutSensorInput | VoltageCurrentUpdateWithWhereUniqueWithoutSensorInput[]
    updateMany?: VoltageCurrentUpdateManyWithWhereWithoutSensorInput | VoltageCurrentUpdateManyWithWhereWithoutSensorInput[]
    deleteMany?: VoltageCurrentScalarWhereInput | VoltageCurrentScalarWhereInput[]
  }

  export type SensorCreateNestedOneWithoutSubStationPowerInput = {
    create?: XOR<SensorCreateWithoutSubStationPowerInput, SensorUncheckedCreateWithoutSubStationPowerInput>
    connectOrCreate?: SensorCreateOrConnectWithoutSubStationPowerInput
    connect?: SensorWhereUniqueInput
  }

  export type SensorUpdateOneRequiredWithoutSubStationPowerNestedInput = {
    create?: XOR<SensorCreateWithoutSubStationPowerInput, SensorUncheckedCreateWithoutSubStationPowerInput>
    connectOrCreate?: SensorCreateOrConnectWithoutSubStationPowerInput
    upsert?: SensorUpsertWithoutSubStationPowerInput
    connect?: SensorWhereUniqueInput
    update?: XOR<XOR<SensorUpdateToOneWithWhereWithoutSubStationPowerInput, SensorUpdateWithoutSubStationPowerInput>, SensorUncheckedUpdateWithoutSubStationPowerInput>
  }

  export type SensorCreateNestedOneWithoutVoltageCurrentInput = {
    create?: XOR<SensorCreateWithoutVoltageCurrentInput, SensorUncheckedCreateWithoutVoltageCurrentInput>
    connectOrCreate?: SensorCreateOrConnectWithoutVoltageCurrentInput
    connect?: SensorWhereUniqueInput
  }

  export type SensorUpdateOneRequiredWithoutVoltageCurrentNestedInput = {
    create?: XOR<SensorCreateWithoutVoltageCurrentInput, SensorUncheckedCreateWithoutVoltageCurrentInput>
    connectOrCreate?: SensorCreateOrConnectWithoutVoltageCurrentInput
    upsert?: SensorUpsertWithoutVoltageCurrentInput
    connect?: SensorWhereUniqueInput
    update?: XOR<XOR<SensorUpdateToOneWithWhereWithoutVoltageCurrentInput, SensorUpdateWithoutVoltageCurrentInput>, SensorUncheckedUpdateWithoutVoltageCurrentInput>
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedFloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type SensorCreateWithoutCustomerConsumptionInput = {
    id: string
    type: string
    feeder: string
    latitude?: number | null
    longitude?: number | null
    segment?: string | null
    Power?: PowerCreateNestedManyWithoutSensorInput
    SubStationPower?: SubStationPowerCreateNestedManyWithoutSensorInput
    VoltageCurrent?: VoltageCurrentCreateNestedManyWithoutSensorInput
  }

  export type SensorUncheckedCreateWithoutCustomerConsumptionInput = {
    id: string
    type: string
    feeder: string
    latitude?: number | null
    longitude?: number | null
    segment?: string | null
    Power?: PowerUncheckedCreateNestedManyWithoutSensorInput
    SubStationPower?: SubStationPowerUncheckedCreateNestedManyWithoutSensorInput
    VoltageCurrent?: VoltageCurrentUncheckedCreateNestedManyWithoutSensorInput
  }

  export type SensorCreateOrConnectWithoutCustomerConsumptionInput = {
    where: SensorWhereUniqueInput
    create: XOR<SensorCreateWithoutCustomerConsumptionInput, SensorUncheckedCreateWithoutCustomerConsumptionInput>
  }

  export type SensorUpsertWithoutCustomerConsumptionInput = {
    update: XOR<SensorUpdateWithoutCustomerConsumptionInput, SensorUncheckedUpdateWithoutCustomerConsumptionInput>
    create: XOR<SensorCreateWithoutCustomerConsumptionInput, SensorUncheckedCreateWithoutCustomerConsumptionInput>
    where?: SensorWhereInput
  }

  export type SensorUpdateToOneWithWhereWithoutCustomerConsumptionInput = {
    where?: SensorWhereInput
    data: XOR<SensorUpdateWithoutCustomerConsumptionInput, SensorUncheckedUpdateWithoutCustomerConsumptionInput>
  }

  export type SensorUpdateWithoutCustomerConsumptionInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    feeder?: StringFieldUpdateOperationsInput | string
    latitude?: NullableFloatFieldUpdateOperationsInput | number | null
    longitude?: NullableFloatFieldUpdateOperationsInput | number | null
    segment?: NullableStringFieldUpdateOperationsInput | string | null
    Power?: PowerUpdateManyWithoutSensorNestedInput
    SubStationPower?: SubStationPowerUpdateManyWithoutSensorNestedInput
    VoltageCurrent?: VoltageCurrentUpdateManyWithoutSensorNestedInput
  }

  export type SensorUncheckedUpdateWithoutCustomerConsumptionInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    feeder?: StringFieldUpdateOperationsInput | string
    latitude?: NullableFloatFieldUpdateOperationsInput | number | null
    longitude?: NullableFloatFieldUpdateOperationsInput | number | null
    segment?: NullableStringFieldUpdateOperationsInput | string | null
    Power?: PowerUncheckedUpdateManyWithoutSensorNestedInput
    SubStationPower?: SubStationPowerUncheckedUpdateManyWithoutSensorNestedInput
    VoltageCurrent?: VoltageCurrentUncheckedUpdateManyWithoutSensorNestedInput
  }

  export type SensorCreateWithoutPowerInput = {
    id: string
    type: string
    feeder: string
    latitude?: number | null
    longitude?: number | null
    segment?: string | null
    CustomerConsumption?: CustomerConsumptionCreateNestedManyWithoutSensorInput
    SubStationPower?: SubStationPowerCreateNestedManyWithoutSensorInput
    VoltageCurrent?: VoltageCurrentCreateNestedManyWithoutSensorInput
  }

  export type SensorUncheckedCreateWithoutPowerInput = {
    id: string
    type: string
    feeder: string
    latitude?: number | null
    longitude?: number | null
    segment?: string | null
    CustomerConsumption?: CustomerConsumptionUncheckedCreateNestedManyWithoutSensorInput
    SubStationPower?: SubStationPowerUncheckedCreateNestedManyWithoutSensorInput
    VoltageCurrent?: VoltageCurrentUncheckedCreateNestedManyWithoutSensorInput
  }

  export type SensorCreateOrConnectWithoutPowerInput = {
    where: SensorWhereUniqueInput
    create: XOR<SensorCreateWithoutPowerInput, SensorUncheckedCreateWithoutPowerInput>
  }

  export type SensorUpsertWithoutPowerInput = {
    update: XOR<SensorUpdateWithoutPowerInput, SensorUncheckedUpdateWithoutPowerInput>
    create: XOR<SensorCreateWithoutPowerInput, SensorUncheckedCreateWithoutPowerInput>
    where?: SensorWhereInput
  }

  export type SensorUpdateToOneWithWhereWithoutPowerInput = {
    where?: SensorWhereInput
    data: XOR<SensorUpdateWithoutPowerInput, SensorUncheckedUpdateWithoutPowerInput>
  }

  export type SensorUpdateWithoutPowerInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    feeder?: StringFieldUpdateOperationsInput | string
    latitude?: NullableFloatFieldUpdateOperationsInput | number | null
    longitude?: NullableFloatFieldUpdateOperationsInput | number | null
    segment?: NullableStringFieldUpdateOperationsInput | string | null
    CustomerConsumption?: CustomerConsumptionUpdateManyWithoutSensorNestedInput
    SubStationPower?: SubStationPowerUpdateManyWithoutSensorNestedInput
    VoltageCurrent?: VoltageCurrentUpdateManyWithoutSensorNestedInput
  }

  export type SensorUncheckedUpdateWithoutPowerInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    feeder?: StringFieldUpdateOperationsInput | string
    latitude?: NullableFloatFieldUpdateOperationsInput | number | null
    longitude?: NullableFloatFieldUpdateOperationsInput | number | null
    segment?: NullableStringFieldUpdateOperationsInput | string | null
    CustomerConsumption?: CustomerConsumptionUncheckedUpdateManyWithoutSensorNestedInput
    SubStationPower?: SubStationPowerUncheckedUpdateManyWithoutSensorNestedInput
    VoltageCurrent?: VoltageCurrentUncheckedUpdateManyWithoutSensorNestedInput
  }

  export type CustomerConsumptionCreateWithoutSensorInput = {
    timestamp: Date | string
    P: number
    Q: number
  }

  export type CustomerConsumptionUncheckedCreateWithoutSensorInput = {
    timestamp: Date | string
    P: number
    Q: number
  }

  export type CustomerConsumptionCreateOrConnectWithoutSensorInput = {
    where: CustomerConsumptionWhereUniqueInput
    create: XOR<CustomerConsumptionCreateWithoutSensorInput, CustomerConsumptionUncheckedCreateWithoutSensorInput>
  }

  export type CustomerConsumptionCreateManySensorInputEnvelope = {
    data: CustomerConsumptionCreateManySensorInput | CustomerConsumptionCreateManySensorInput[]
    skipDuplicates?: boolean
  }

  export type PowerCreateWithoutSensorInput = {
    timestamp: Date | string
    Pfeed: number
    Qfeed: number
    Pagg: number
    Qagg: number
    faultType?: number | null
  }

  export type PowerUncheckedCreateWithoutSensorInput = {
    timestamp: Date | string
    Pfeed: number
    Qfeed: number
    Pagg: number
    Qagg: number
    faultType?: number | null
  }

  export type PowerCreateOrConnectWithoutSensorInput = {
    where: PowerWhereUniqueInput
    create: XOR<PowerCreateWithoutSensorInput, PowerUncheckedCreateWithoutSensorInput>
  }

  export type PowerCreateManySensorInputEnvelope = {
    data: PowerCreateManySensorInput | PowerCreateManySensorInput[]
    skipDuplicates?: boolean
  }

  export type SubStationPowerCreateWithoutSensorInput = {
    timestamp: Date | string
    Psub: number
    Qsub: number
  }

  export type SubStationPowerUncheckedCreateWithoutSensorInput = {
    timestamp: Date | string
    Psub: number
    Qsub: number
  }

  export type SubStationPowerCreateOrConnectWithoutSensorInput = {
    where: SubStationPowerWhereUniqueInput
    create: XOR<SubStationPowerCreateWithoutSensorInput, SubStationPowerUncheckedCreateWithoutSensorInput>
  }

  export type SubStationPowerCreateManySensorInputEnvelope = {
    data: SubStationPowerCreateManySensorInput | SubStationPowerCreateManySensorInput[]
    skipDuplicates?: boolean
  }

  export type VoltageCurrentCreateWithoutSensorInput = {
    timestamp: Date | string
    Va: number
    Vb: number
    Vc: number
    Ia: number
    Ib: number
    Ic: number
    faultType?: number | null
  }

  export type VoltageCurrentUncheckedCreateWithoutSensorInput = {
    timestamp: Date | string
    Va: number
    Vb: number
    Vc: number
    Ia: number
    Ib: number
    Ic: number
    faultType?: number | null
  }

  export type VoltageCurrentCreateOrConnectWithoutSensorInput = {
    where: VoltageCurrentWhereUniqueInput
    create: XOR<VoltageCurrentCreateWithoutSensorInput, VoltageCurrentUncheckedCreateWithoutSensorInput>
  }

  export type VoltageCurrentCreateManySensorInputEnvelope = {
    data: VoltageCurrentCreateManySensorInput | VoltageCurrentCreateManySensorInput[]
    skipDuplicates?: boolean
  }

  export type CustomerConsumptionUpsertWithWhereUniqueWithoutSensorInput = {
    where: CustomerConsumptionWhereUniqueInput
    update: XOR<CustomerConsumptionUpdateWithoutSensorInput, CustomerConsumptionUncheckedUpdateWithoutSensorInput>
    create: XOR<CustomerConsumptionCreateWithoutSensorInput, CustomerConsumptionUncheckedCreateWithoutSensorInput>
  }

  export type CustomerConsumptionUpdateWithWhereUniqueWithoutSensorInput = {
    where: CustomerConsumptionWhereUniqueInput
    data: XOR<CustomerConsumptionUpdateWithoutSensorInput, CustomerConsumptionUncheckedUpdateWithoutSensorInput>
  }

  export type CustomerConsumptionUpdateManyWithWhereWithoutSensorInput = {
    where: CustomerConsumptionScalarWhereInput
    data: XOR<CustomerConsumptionUpdateManyMutationInput, CustomerConsumptionUncheckedUpdateManyWithoutSensorInput>
  }

  export type CustomerConsumptionScalarWhereInput = {
    AND?: CustomerConsumptionScalarWhereInput | CustomerConsumptionScalarWhereInput[]
    OR?: CustomerConsumptionScalarWhereInput[]
    NOT?: CustomerConsumptionScalarWhereInput | CustomerConsumptionScalarWhereInput[]
    timestamp?: DateTimeFilter<"CustomerConsumption"> | Date | string
    sensorId?: StringFilter<"CustomerConsumption"> | string
    P?: FloatFilter<"CustomerConsumption"> | number
    Q?: FloatFilter<"CustomerConsumption"> | number
  }

  export type PowerUpsertWithWhereUniqueWithoutSensorInput = {
    where: PowerWhereUniqueInput
    update: XOR<PowerUpdateWithoutSensorInput, PowerUncheckedUpdateWithoutSensorInput>
    create: XOR<PowerCreateWithoutSensorInput, PowerUncheckedCreateWithoutSensorInput>
  }

  export type PowerUpdateWithWhereUniqueWithoutSensorInput = {
    where: PowerWhereUniqueInput
    data: XOR<PowerUpdateWithoutSensorInput, PowerUncheckedUpdateWithoutSensorInput>
  }

  export type PowerUpdateManyWithWhereWithoutSensorInput = {
    where: PowerScalarWhereInput
    data: XOR<PowerUpdateManyMutationInput, PowerUncheckedUpdateManyWithoutSensorInput>
  }

  export type PowerScalarWhereInput = {
    AND?: PowerScalarWhereInput | PowerScalarWhereInput[]
    OR?: PowerScalarWhereInput[]
    NOT?: PowerScalarWhereInput | PowerScalarWhereInput[]
    timestamp?: DateTimeFilter<"Power"> | Date | string
    sensorId?: StringFilter<"Power"> | string
    Pfeed?: FloatFilter<"Power"> | number
    Qfeed?: FloatFilter<"Power"> | number
    Pagg?: FloatFilter<"Power"> | number
    Qagg?: FloatFilter<"Power"> | number
    faultType?: IntNullableFilter<"Power"> | number | null
  }

  export type SubStationPowerUpsertWithWhereUniqueWithoutSensorInput = {
    where: SubStationPowerWhereUniqueInput
    update: XOR<SubStationPowerUpdateWithoutSensorInput, SubStationPowerUncheckedUpdateWithoutSensorInput>
    create: XOR<SubStationPowerCreateWithoutSensorInput, SubStationPowerUncheckedCreateWithoutSensorInput>
  }

  export type SubStationPowerUpdateWithWhereUniqueWithoutSensorInput = {
    where: SubStationPowerWhereUniqueInput
    data: XOR<SubStationPowerUpdateWithoutSensorInput, SubStationPowerUncheckedUpdateWithoutSensorInput>
  }

  export type SubStationPowerUpdateManyWithWhereWithoutSensorInput = {
    where: SubStationPowerScalarWhereInput
    data: XOR<SubStationPowerUpdateManyMutationInput, SubStationPowerUncheckedUpdateManyWithoutSensorInput>
  }

  export type SubStationPowerScalarWhereInput = {
    AND?: SubStationPowerScalarWhereInput | SubStationPowerScalarWhereInput[]
    OR?: SubStationPowerScalarWhereInput[]
    NOT?: SubStationPowerScalarWhereInput | SubStationPowerScalarWhereInput[]
    timestamp?: DateTimeFilter<"SubStationPower"> | Date | string
    sensorId?: StringFilter<"SubStationPower"> | string
    Psub?: FloatFilter<"SubStationPower"> | number
    Qsub?: FloatFilter<"SubStationPower"> | number
  }

  export type VoltageCurrentUpsertWithWhereUniqueWithoutSensorInput = {
    where: VoltageCurrentWhereUniqueInput
    update: XOR<VoltageCurrentUpdateWithoutSensorInput, VoltageCurrentUncheckedUpdateWithoutSensorInput>
    create: XOR<VoltageCurrentCreateWithoutSensorInput, VoltageCurrentUncheckedCreateWithoutSensorInput>
  }

  export type VoltageCurrentUpdateWithWhereUniqueWithoutSensorInput = {
    where: VoltageCurrentWhereUniqueInput
    data: XOR<VoltageCurrentUpdateWithoutSensorInput, VoltageCurrentUncheckedUpdateWithoutSensorInput>
  }

  export type VoltageCurrentUpdateManyWithWhereWithoutSensorInput = {
    where: VoltageCurrentScalarWhereInput
    data: XOR<VoltageCurrentUpdateManyMutationInput, VoltageCurrentUncheckedUpdateManyWithoutSensorInput>
  }

  export type VoltageCurrentScalarWhereInput = {
    AND?: VoltageCurrentScalarWhereInput | VoltageCurrentScalarWhereInput[]
    OR?: VoltageCurrentScalarWhereInput[]
    NOT?: VoltageCurrentScalarWhereInput | VoltageCurrentScalarWhereInput[]
    timestamp?: DateTimeFilter<"VoltageCurrent"> | Date | string
    sensorId?: StringFilter<"VoltageCurrent"> | string
    Va?: FloatFilter<"VoltageCurrent"> | number
    Vb?: FloatFilter<"VoltageCurrent"> | number
    Vc?: FloatFilter<"VoltageCurrent"> | number
    Ia?: FloatFilter<"VoltageCurrent"> | number
    Ib?: FloatFilter<"VoltageCurrent"> | number
    Ic?: FloatFilter<"VoltageCurrent"> | number
    faultType?: IntNullableFilter<"VoltageCurrent"> | number | null
  }

  export type SensorCreateWithoutSubStationPowerInput = {
    id: string
    type: string
    feeder: string
    latitude?: number | null
    longitude?: number | null
    segment?: string | null
    CustomerConsumption?: CustomerConsumptionCreateNestedManyWithoutSensorInput
    Power?: PowerCreateNestedManyWithoutSensorInput
    VoltageCurrent?: VoltageCurrentCreateNestedManyWithoutSensorInput
  }

  export type SensorUncheckedCreateWithoutSubStationPowerInput = {
    id: string
    type: string
    feeder: string
    latitude?: number | null
    longitude?: number | null
    segment?: string | null
    CustomerConsumption?: CustomerConsumptionUncheckedCreateNestedManyWithoutSensorInput
    Power?: PowerUncheckedCreateNestedManyWithoutSensorInput
    VoltageCurrent?: VoltageCurrentUncheckedCreateNestedManyWithoutSensorInput
  }

  export type SensorCreateOrConnectWithoutSubStationPowerInput = {
    where: SensorWhereUniqueInput
    create: XOR<SensorCreateWithoutSubStationPowerInput, SensorUncheckedCreateWithoutSubStationPowerInput>
  }

  export type SensorUpsertWithoutSubStationPowerInput = {
    update: XOR<SensorUpdateWithoutSubStationPowerInput, SensorUncheckedUpdateWithoutSubStationPowerInput>
    create: XOR<SensorCreateWithoutSubStationPowerInput, SensorUncheckedCreateWithoutSubStationPowerInput>
    where?: SensorWhereInput
  }

  export type SensorUpdateToOneWithWhereWithoutSubStationPowerInput = {
    where?: SensorWhereInput
    data: XOR<SensorUpdateWithoutSubStationPowerInput, SensorUncheckedUpdateWithoutSubStationPowerInput>
  }

  export type SensorUpdateWithoutSubStationPowerInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    feeder?: StringFieldUpdateOperationsInput | string
    latitude?: NullableFloatFieldUpdateOperationsInput | number | null
    longitude?: NullableFloatFieldUpdateOperationsInput | number | null
    segment?: NullableStringFieldUpdateOperationsInput | string | null
    CustomerConsumption?: CustomerConsumptionUpdateManyWithoutSensorNestedInput
    Power?: PowerUpdateManyWithoutSensorNestedInput
    VoltageCurrent?: VoltageCurrentUpdateManyWithoutSensorNestedInput
  }

  export type SensorUncheckedUpdateWithoutSubStationPowerInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    feeder?: StringFieldUpdateOperationsInput | string
    latitude?: NullableFloatFieldUpdateOperationsInput | number | null
    longitude?: NullableFloatFieldUpdateOperationsInput | number | null
    segment?: NullableStringFieldUpdateOperationsInput | string | null
    CustomerConsumption?: CustomerConsumptionUncheckedUpdateManyWithoutSensorNestedInput
    Power?: PowerUncheckedUpdateManyWithoutSensorNestedInput
    VoltageCurrent?: VoltageCurrentUncheckedUpdateManyWithoutSensorNestedInput
  }

  export type SensorCreateWithoutVoltageCurrentInput = {
    id: string
    type: string
    feeder: string
    latitude?: number | null
    longitude?: number | null
    segment?: string | null
    CustomerConsumption?: CustomerConsumptionCreateNestedManyWithoutSensorInput
    Power?: PowerCreateNestedManyWithoutSensorInput
    SubStationPower?: SubStationPowerCreateNestedManyWithoutSensorInput
  }

  export type SensorUncheckedCreateWithoutVoltageCurrentInput = {
    id: string
    type: string
    feeder: string
    latitude?: number | null
    longitude?: number | null
    segment?: string | null
    CustomerConsumption?: CustomerConsumptionUncheckedCreateNestedManyWithoutSensorInput
    Power?: PowerUncheckedCreateNestedManyWithoutSensorInput
    SubStationPower?: SubStationPowerUncheckedCreateNestedManyWithoutSensorInput
  }

  export type SensorCreateOrConnectWithoutVoltageCurrentInput = {
    where: SensorWhereUniqueInput
    create: XOR<SensorCreateWithoutVoltageCurrentInput, SensorUncheckedCreateWithoutVoltageCurrentInput>
  }

  export type SensorUpsertWithoutVoltageCurrentInput = {
    update: XOR<SensorUpdateWithoutVoltageCurrentInput, SensorUncheckedUpdateWithoutVoltageCurrentInput>
    create: XOR<SensorCreateWithoutVoltageCurrentInput, SensorUncheckedCreateWithoutVoltageCurrentInput>
    where?: SensorWhereInput
  }

  export type SensorUpdateToOneWithWhereWithoutVoltageCurrentInput = {
    where?: SensorWhereInput
    data: XOR<SensorUpdateWithoutVoltageCurrentInput, SensorUncheckedUpdateWithoutVoltageCurrentInput>
  }

  export type SensorUpdateWithoutVoltageCurrentInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    feeder?: StringFieldUpdateOperationsInput | string
    latitude?: NullableFloatFieldUpdateOperationsInput | number | null
    longitude?: NullableFloatFieldUpdateOperationsInput | number | null
    segment?: NullableStringFieldUpdateOperationsInput | string | null
    CustomerConsumption?: CustomerConsumptionUpdateManyWithoutSensorNestedInput
    Power?: PowerUpdateManyWithoutSensorNestedInput
    SubStationPower?: SubStationPowerUpdateManyWithoutSensorNestedInput
  }

  export type SensorUncheckedUpdateWithoutVoltageCurrentInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    feeder?: StringFieldUpdateOperationsInput | string
    latitude?: NullableFloatFieldUpdateOperationsInput | number | null
    longitude?: NullableFloatFieldUpdateOperationsInput | number | null
    segment?: NullableStringFieldUpdateOperationsInput | string | null
    CustomerConsumption?: CustomerConsumptionUncheckedUpdateManyWithoutSensorNestedInput
    Power?: PowerUncheckedUpdateManyWithoutSensorNestedInput
    SubStationPower?: SubStationPowerUncheckedUpdateManyWithoutSensorNestedInput
  }

  export type CustomerConsumptionCreateManySensorInput = {
    timestamp: Date | string
    P: number
    Q: number
  }

  export type PowerCreateManySensorInput = {
    timestamp: Date | string
    Pfeed: number
    Qfeed: number
    Pagg: number
    Qagg: number
    faultType?: number | null
  }

  export type SubStationPowerCreateManySensorInput = {
    timestamp: Date | string
    Psub: number
    Qsub: number
  }

  export type VoltageCurrentCreateManySensorInput = {
    timestamp: Date | string
    Va: number
    Vb: number
    Vc: number
    Ia: number
    Ib: number
    Ic: number
    faultType?: number | null
  }

  export type CustomerConsumptionUpdateWithoutSensorInput = {
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    P?: FloatFieldUpdateOperationsInput | number
    Q?: FloatFieldUpdateOperationsInput | number
  }

  export type CustomerConsumptionUncheckedUpdateWithoutSensorInput = {
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    P?: FloatFieldUpdateOperationsInput | number
    Q?: FloatFieldUpdateOperationsInput | number
  }

  export type CustomerConsumptionUncheckedUpdateManyWithoutSensorInput = {
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    P?: FloatFieldUpdateOperationsInput | number
    Q?: FloatFieldUpdateOperationsInput | number
  }

  export type PowerUpdateWithoutSensorInput = {
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    Pfeed?: FloatFieldUpdateOperationsInput | number
    Qfeed?: FloatFieldUpdateOperationsInput | number
    Pagg?: FloatFieldUpdateOperationsInput | number
    Qagg?: FloatFieldUpdateOperationsInput | number
    faultType?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type PowerUncheckedUpdateWithoutSensorInput = {
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    Pfeed?: FloatFieldUpdateOperationsInput | number
    Qfeed?: FloatFieldUpdateOperationsInput | number
    Pagg?: FloatFieldUpdateOperationsInput | number
    Qagg?: FloatFieldUpdateOperationsInput | number
    faultType?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type PowerUncheckedUpdateManyWithoutSensorInput = {
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    Pfeed?: FloatFieldUpdateOperationsInput | number
    Qfeed?: FloatFieldUpdateOperationsInput | number
    Pagg?: FloatFieldUpdateOperationsInput | number
    Qagg?: FloatFieldUpdateOperationsInput | number
    faultType?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type SubStationPowerUpdateWithoutSensorInput = {
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    Psub?: FloatFieldUpdateOperationsInput | number
    Qsub?: FloatFieldUpdateOperationsInput | number
  }

  export type SubStationPowerUncheckedUpdateWithoutSensorInput = {
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    Psub?: FloatFieldUpdateOperationsInput | number
    Qsub?: FloatFieldUpdateOperationsInput | number
  }

  export type SubStationPowerUncheckedUpdateManyWithoutSensorInput = {
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    Psub?: FloatFieldUpdateOperationsInput | number
    Qsub?: FloatFieldUpdateOperationsInput | number
  }

  export type VoltageCurrentUpdateWithoutSensorInput = {
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    Va?: FloatFieldUpdateOperationsInput | number
    Vb?: FloatFieldUpdateOperationsInput | number
    Vc?: FloatFieldUpdateOperationsInput | number
    Ia?: FloatFieldUpdateOperationsInput | number
    Ib?: FloatFieldUpdateOperationsInput | number
    Ic?: FloatFieldUpdateOperationsInput | number
    faultType?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type VoltageCurrentUncheckedUpdateWithoutSensorInput = {
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    Va?: FloatFieldUpdateOperationsInput | number
    Vb?: FloatFieldUpdateOperationsInput | number
    Vc?: FloatFieldUpdateOperationsInput | number
    Ia?: FloatFieldUpdateOperationsInput | number
    Ib?: FloatFieldUpdateOperationsInput | number
    Ic?: FloatFieldUpdateOperationsInput | number
    faultType?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type VoltageCurrentUncheckedUpdateManyWithoutSensorInput = {
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    Va?: FloatFieldUpdateOperationsInput | number
    Vb?: FloatFieldUpdateOperationsInput | number
    Vc?: FloatFieldUpdateOperationsInput | number
    Ia?: FloatFieldUpdateOperationsInput | number
    Ib?: FloatFieldUpdateOperationsInput | number
    Ic?: FloatFieldUpdateOperationsInput | number
    faultType?: NullableIntFieldUpdateOperationsInput | number | null
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use SensorCountOutputTypeDefaultArgs instead
     */
    export type SensorCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SensorCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CustomerConsumptionDefaultArgs instead
     */
    export type CustomerConsumptionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CustomerConsumptionDefaultArgs<ExtArgs>
    /**
     * @deprecated Use LossDefaultArgs instead
     */
    export type LossArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = LossDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PowerDefaultArgs instead
     */
    export type PowerArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PowerDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SensorDefaultArgs instead
     */
    export type SensorArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SensorDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SubStationPowerDefaultArgs instead
     */
    export type SubStationPowerArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SubStationPowerDefaultArgs<ExtArgs>
    /**
     * @deprecated Use VoltageCurrentDefaultArgs instead
     */
    export type VoltageCurrentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = VoltageCurrentDefaultArgs<ExtArgs>
    /**
     * @deprecated Use sensorDefaultArgs instead
     */
    export type sensorArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = sensorDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}